{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/components/page-header.tsx"],"sourcesContent":["\r\n'use client';\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Button } from \"./ui/button\";\r\nimport { ArrowLeft } from \"lucide-react\";\r\nimport { useRouter } from \"next/navigation\";\r\n\r\nfunction PageHeader({\r\n  className,\r\n  children,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLDivElement>) {\r\n    const router = useRouter();\r\n  return (\r\n    <section\r\n      className={cn(\r\n        \"flex max-w-full flex-col gap-2\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n        <div className=\"flex items-center gap-4\">\r\n            <Button\r\n                variant=\"outline\"\r\n                size=\"icon\"\r\n                className=\"h-8 w-8 shrink-0\"\r\n                onClick={() => router.back()}\r\n            >\r\n                <ArrowLeft className=\"h-4 w-4\" />\r\n                <span className=\"sr-only\">Back</span>\r\n            </Button>\r\n            <div className=\"flex-1\">{children}</div>\r\n        </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nfunction PageHeaderHeading({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLHeadingElement>) {\r\n  return (\r\n    <h1\r\n      className={cn(\r\n        \"text-3xl font-bold leading-tight tracking-tighter md:text-4xl lg:leading-[1.1]\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction PageHeaderDescription({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLParagraphElement>) {\r\n  return (\r\n    <p\r\n      className={cn(\r\n        \"max-w-prose text-balance text-muted-foreground sm:text-lg\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport { PageHeader, PageHeaderHeading, PageHeaderDescription };\r\n"],"names":[],"mappings":";;;;;;AAEA;AACA;AACA;AACA;;;AAJA;;;;;AAMA,SAAS,WAAW,EAClB,SAAS,EACT,QAAQ,EACR,GAAG,OACkC;;IACnC,MAAM,SAAS,CAAA,GAAA,qIAAA,CAAA,YAAS,AAAD;IACzB,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,kCACA;QAED,GAAG,KAAK;kBAEP,cAAA,6LAAC;YAAI,WAAU;;8BACX,6LAAC,qIAAA,CAAA,SAAM;oBACH,SAAQ;oBACR,MAAK;oBACL,WAAU;oBACV,SAAS,IAAM,OAAO,IAAI;;sCAE1B,6LAAC,mNAAA,CAAA,YAAS;4BAAC,WAAU;;;;;;sCACrB,6LAAC;4BAAK,WAAU;sCAAU;;;;;;;;;;;;8BAE9B,6LAAC;oBAAI,WAAU;8BAAU;;;;;;;;;;;;;;;;;AAIrC;GA5BS;;QAKU,qIAAA,CAAA,YAAS;;;KALnB;AA8BT,SAAS,kBAAkB,EACzB,SAAS,EACT,GAAG,OACsC;IACzC,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,kFACA;QAED,GAAG,KAAK;;;;;;AAGf;MAbS;AAeT,SAAS,sBAAsB,EAC7B,SAAS,EACT,GAAG,OACwC;IAC3C,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,6DACA;QAED,GAAG,KAAK;;;;;;AAGf;MAbS","debugId":null}},
    {"offset": {"line": 122, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Card = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\r\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nCard.displayName = \"Card\"\r\n\r\nconst CardHeader = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardHeader.displayName = \"CardHeader\"\r\n\r\nconst CardTitle = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\r\n      \"text-2xl font-semibold leading-none tracking-tight\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nCardTitle.displayName = \"CardTitle\"\r\n\r\nconst CardDescription = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardDescription.displayName = \"CardDescription\"\r\n\r\nconst CardContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\r\n))\r\nCardContent.displayName = \"CardContent\"\r\n\r\nconst CardFooter = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"flex items-center p-6 pt-0\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardFooter.displayName = \"CardFooter\"\r\n\r\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\r\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,QAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,SAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 225, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst labelVariants = cva(\r\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\r\n)\r\n\r\nconst Label = React.forwardRef<\r\n  React.ElementRef<typeof LabelPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\r\n    VariantProps<typeof labelVariants>\r\n>(({ className, ...props }, ref) => (\r\n  <LabelPrimitive.Root\r\n    ref={ref}\r\n    className={cn(labelVariants(), className)}\r\n    {...props}\r\n  />\r\n))\r\nLabel.displayName = LabelPrimitive.Root.displayName\r\n\r\nexport { Label }\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,mKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,6LAAC,oKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;;AAGb,MAAM,WAAW,GAAG,oKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 264, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/components/ui/form.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport {\r\n  Controller,\r\n  FormProvider,\r\n  useFormContext,\r\n  type ControllerProps,\r\n  type FieldPath,\r\n  type FieldValues,\r\n} from \"react-hook-form\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Label } from \"@/components/ui/label\"\r\n\r\nconst Form = FormProvider\r\n\r\ntype FormFieldContextValue<\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n> = {\r\n  name: TName\r\n}\r\n\r\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\r\n  {} as FormFieldContextValue\r\n)\r\n\r\nconst FormField = <\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n>({\r\n  ...props\r\n}: ControllerProps<TFieldValues, TName>) => {\r\n  return (\r\n    <FormFieldContext.Provider value={{ name: props.name }}>\r\n      <Controller {...props} />\r\n    </FormFieldContext.Provider>\r\n  )\r\n}\r\n\r\nconst useFormField = () => {\r\n  const fieldContext = React.useContext(FormFieldContext)\r\n  const itemContext = React.useContext(FormItemContext)\r\n  const { getFieldState, formState } = useFormContext()\r\n\r\n  const fieldState = getFieldState(fieldContext.name, formState)\r\n\r\n  if (!fieldContext) {\r\n    throw new Error(\"useFormField should be used within <FormField>\")\r\n  }\r\n\r\n  const { id } = itemContext\r\n\r\n  return {\r\n    id,\r\n    name: fieldContext.name,\r\n    formItemId: `${id}-form-item`,\r\n    formDescriptionId: `${id}-form-item-description`,\r\n    formMessageId: `${id}-form-item-message`,\r\n    ...fieldState,\r\n  }\r\n}\r\n\r\ntype FormItemContextValue = {\r\n  id: string\r\n}\r\n\r\nconst FormItemContext = React.createContext<FormItemContextValue>(\r\n  {} as FormItemContextValue\r\n)\r\n\r\nconst FormItem = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => {\r\n  const id = React.useId()\r\n\r\n  return (\r\n    <FormItemContext.Provider value={{ id }}>\r\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\r\n    </FormItemContext.Provider>\r\n  )\r\n})\r\nFormItem.displayName = \"FormItem\"\r\n\r\nconst FormLabel = React.forwardRef<\r\n  React.ElementRef<typeof LabelPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\r\n>(({ className, ...props }, ref) => {\r\n  const { error, formItemId } = useFormField()\r\n\r\n  return (\r\n    <Label\r\n      ref={ref}\r\n      className={cn(error && \"text-destructive\", className)}\r\n      htmlFor={formItemId}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nFormLabel.displayName = \"FormLabel\"\r\n\r\nconst FormControl = React.forwardRef<\r\n  React.ElementRef<typeof Slot>,\r\n  React.ComponentPropsWithoutRef<typeof Slot>\r\n>(({ ...props }, ref) => {\r\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\r\n\r\n  return (\r\n    <Slot\r\n      ref={ref}\r\n      id={formItemId}\r\n      aria-describedby={\r\n        !error\r\n          ? `${formDescriptionId}`\r\n          : `${formDescriptionId} ${formMessageId}`\r\n      }\r\n      aria-invalid={!!error}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nFormControl.displayName = \"FormControl\"\r\n\r\nconst FormDescription = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, ...props }, ref) => {\r\n  const { formDescriptionId } = useFormField()\r\n\r\n  return (\r\n    <p\r\n      ref={ref}\r\n      id={formDescriptionId}\r\n      className={cn(\"text-sm text-muted-foreground\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nFormDescription.displayName = \"FormDescription\"\r\n\r\nconst FormMessage = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, children, ...props }, ref) => {\r\n  const { error, formMessageId } = useFormField()\r\n  const body = error ? String(error?.message ?? \"\") : children\r\n\r\n  if (!body) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <p\r\n      ref={ref}\r\n      id={formMessageId}\r\n      className={cn(\"text-sm font-medium text-destructive\", className)}\r\n      {...props}\r\n    >\r\n      {body}\r\n    </p>\r\n  )\r\n})\r\nFormMessage.displayName = \"FormMessage\"\r\n\r\nexport {\r\n  useFormField,\r\n  Form,\r\n  FormItem,\r\n  FormLabel,\r\n  FormControl,\r\n  FormDescription,\r\n  FormMessage,\r\n  FormField,\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 482, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/components/ui/textarea.tsx"],"sourcesContent":["import * as React from 'react';\r\n\r\nimport {cn} from '@/lib/utils';\r\n\r\nconst Textarea = React.forwardRef<HTMLTextAreaElement, React.ComponentProps<'textarea'>>(\r\n  ({className, ...props}, ref) => {\r\n    return (\r\n      <textarea\r\n        className={cn(\r\n          'flex min-h-[80px] w-full rounded-md border border-input bg-background px-3 py-2 text-base ring-offset-background placeholder:text-muted-foreground focus-visible:outline-none focus-visible:ring-2 focus-visible:ring-ring focus-visible:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 md:text-sm',\r\n          className\r\n        )}\r\n        ref={ref}\r\n        {...props}\r\n      />\r\n    );\r\n  }\r\n);\r\nTextarea.displayName = 'Textarea';\r\n\r\nexport {Textarea};\r\n"],"names":[],"mappings":";;;;AAAA;AAEA;;;;AAEA,MAAM,yBAAW,CAAA,GAAA,6JAAA,CAAA,aAAgB,AAAD,OAC9B,CAAC,EAAC,SAAS,EAAE,GAAG,OAAM,EAAE;IACtB,qBACE,6LAAC;QACC,WAAW,CAAA,GAAA,sHAAA,CAAA,KAAE,AAAD,EACV,qTACA;QAEF,KAAK;QACJ,GAAG,KAAK;;;;;;AAGf;;AAEF,SAAS,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 517, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/ai/flows/market-price-prediction.ts"],"sourcesContent":["\r\n'use server';\r\n/**\r\n * @fileOverview A market price prediction AI agent.\r\n *\r\n * - predictMarketPrice - A function that handles the price prediction process.\r\n * - MarketPricePredictionInput - The input type for the predictMarketPrice function.\r\n * - MarketPricePredictionOutput - The return type for the predict_price function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\nimport { getAllMarketData } from './market-data';\r\n\r\nconst MarketPricePredictionInputSchema = z.object({\r\n  commodity: z.string().describe('A description from the user about the commodity they want a price prediction for. This could be a simple name like \"Paddy\" or a more descriptive sentence like \"I want to know the price for high-quality wheat in Punjab\".'),\r\n});\r\nexport type MarketPricePredictionInput = z.infer<typeof MarketPricePredictionInputSchema>;\r\n\r\nconst WeeklyForecastSchema = z.object({\r\n  week: z.string().describe('The week of the forecast (e.g., \"Week 1\", \"Week 2\").'),\r\n  price: z.number().describe('The predicted modal price for that week.'),\r\n});\r\n\r\nconst MarketPricePredictionOutputSchema = z.object({\r\n  analysis: z.string().describe('A detailed analysis of the price trend based on historical data.'),\r\n  weeklyForecast: z.array(WeeklyForecastSchema).describe('A 4-week price forecast for the commodity.'),\r\n  suggestion: z.string().describe('An actionable suggestion for the user based on the forecast (e.g., whether to sell or hold).'),\r\n});\r\nexport type MarketPricePredictionOutput = z.infer<typeof MarketPricePredictionOutputSchema>;\r\n\r\n\r\nexport async function predictMarketPrice(\r\n  input: MarketPricePredictionInput\r\n): Promise<MarketPricePredictionOutput> {\r\n  return predictMarketPriceFlow(input);\r\n}\r\n\r\n\r\nconst predictMarketPricePrompt = ai.definePrompt({\r\n  name: 'predictMarketPricePrompt',\r\n  input: {schema: z.object({\r\n    commodity: z.string(),\r\n    marketData: z.string(),\r\n  })},\r\n  output: { format: 'text' }, // Ask for simple text output\r\n  prompt: `You are an expert market analyst specializing in Indian agricultural commodities.\r\n  \r\nYou have been provided with a JSON dataset of recent market prices for a specific commodity. Your task is to analyze this historical data, predict the future price trend for the next 4 weeks, and provide a suggestion to the farmer.\r\n\r\nCommodity to Analyze: {{{commodity}}}\r\n\r\nHistorical Market Data (JSON):\r\n\\`\\`\\`json\r\n{{{marketData}}}\r\n\\`\\`\\`\r\n\r\n1.  **Analysis**: Analyze the provided data to identify price trends, volatility, and any recurring patterns. Consider the 'arrival_date', 'min_price', 'max_price', and 'modal_price'. Write a brief report summarizing your findings.\r\n2.  **4-Week Price Forecast**: Based on your analysis, provide a week-by-week predicted modal price for the commodity for the upcoming four weeks. The price should be a single number (e.g., 1500), not a range.\r\n3.  **Suggestion**: Based on your forecast, provide a short, actionable suggestion to the farmer (e.g., \"Prices are trending up, consider holding your stock for a couple of weeks for a better return.\" or \"Market seems stable, selling now would be a safe choice.\").\r\n\r\nRespond in a clear, narrative format. Do not use JSON.`,\r\n});\r\n\r\nconst jsonOutputFormatterPrompt = ai.definePrompt({\r\n    name: 'jsonOutputFormatterPrompt',\r\n    input: { schema: z.object({ text: z.string() }) },\r\n    output: { schema: MarketPricePredictionOutputSchema },\r\n    prompt: `Convert the following text into a structured JSON object.\r\n\r\nThe JSON object must have three keys: 'analysis', 'weeklyForecast', and 'suggestion'.\r\n- 'analysis' should be a string containing the market analysis.\r\n- 'weeklyForecast' should be an array of objects. Each object must have a 'week' (string) and a 'price' (number).\r\n- 'suggestion' should be a string containing the actionable suggestion.\r\n\r\nExample JSON output:\r\n{\r\n  \"analysis\": \"The analysis of the market...\",\r\n  \"weeklyForecast\": [\r\n    { \"week\": \"Week 1\", \"price\": 1500 },\r\n    { \"week\": \"Week 2\", \"price\": 1550 },\r\n    { \"week\": \"Week 3\", \"price\": 1520 },\r\n    { \"week\": \"Week 4\", \"price\": 1580 }\r\n  ],\r\n  \"suggestion\": \"It is a good time to sell.\"\r\n}\r\n\r\nText to convert:\r\n---\r\n{{{text}}}\r\n---\r\n`,\r\n});\r\n\r\n\r\nconst commodityIdentifierPrompt = ai.definePrompt({\r\n    name: 'commodityIdentifierPrompt',\r\n    input: { schema: z.object({\r\n        description: z.string(),\r\n        commoditiesList: z.array(z.string()),\r\n    })},\r\n    output: { schema: z.object({ commodity: z.string() }) },\r\n    prompt: `From the user's description, identify the single most likely commodity they are asking about.\r\nThe commodity MUST be one of the items from the provided list.\r\n    \r\nUser Description: \"{{{description}}}\"\r\n\r\nHere is a list of available commodities from the market data. Find the best match:\r\n{{#each commoditiesList}}\r\n- {{{this}}}\r\n{{/each}}\r\n    \r\nRespond with only the name of the most relevant commodity from the list. If you cannot find a clear match, respond with \"Unknown\".`,\r\n});\r\n\r\nconst predictMarketPriceFlow = ai.defineFlow(\r\n  {\r\n    name: 'predictMarketPriceFlow',\r\n    inputSchema: MarketPricePredictionInputSchema,\r\n    outputSchema: MarketPricePredictionOutputSchema,\r\n  },\r\n  async ({ commodity: description }) => {\r\n    const allData = await getAllMarketData();\r\n    const uniqueCommodities = [...new Set(allData.map(item => item.commodity).filter(c => c) as string[])];\r\n\r\n    const { output: identifiedCommodity } = await commodityIdentifierPrompt({\r\n        description,\r\n        commoditiesList: uniqueCommodities,\r\n    });\r\n\r\n    if (!identifiedCommodity || !identifiedCommodity.commodity || identifiedCommodity.commodity === 'Unknown') {\r\n        throw new Error(`Could not identify a valid commodity from the description: \"${description}\"`);\r\n    }\r\n    \r\n    const commodityToAnalyze = identifiedCommodity.commodity;\r\n\r\n    const commodityData = allData.filter(item => item.commodity && item.commodity.toLowerCase() === commodityToAnalyze.toLowerCase());\r\n\r\n    if (commodityData.length === 0) {\r\n      throw new Error(`No market data found for commodity: ${commodityToAnalyze}. It might be a rare commodity or the data is not available in the recent records.`);\r\n    }\r\n    \r\n    const dataSample = commodityData.slice(0, 100);\r\n\r\n    // Step 1: Get the analysis as plain text.\r\n    const { text } = await predictMarketPricePrompt({\r\n        commodity: commodityToAnalyze,\r\n        marketData: JSON.stringify(dataSample, null, 2),\r\n    });\r\n\r\n    // Step 2: Convert the text to structured JSON.\r\n    const { output: structuredOutput } = await jsonOutputFormatterPrompt({ text });\r\n    \r\n    return structuredOutput!;\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;;IAgCsB,qBAAA,WAAA,GAAA,CAAA,GAAA,yNAAA,CAAA,wBAAA,EAAA,8CAAA,yNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,yNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 533, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/components/ui/chart.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as RechartsPrimitive from \"recharts\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\n// Format: { THEME_NAME: CSS_SELECTOR }\r\nconst THEMES = { light: \"\", dark: \".dark\" } as const\r\n\r\nexport type ChartConfig = {\r\n  [k in string]: {\r\n    label?: React.ReactNode\r\n    icon?: React.ComponentType\r\n  } & (\r\n    | { color?: string; theme?: never }\r\n    | { color?: never; theme: Record<keyof typeof THEMES, string> }\r\n  )\r\n}\r\n\r\ntype ChartContextProps = {\r\n  config: ChartConfig\r\n}\r\n\r\nconst ChartContext = React.createContext<ChartContextProps | null>(null)\r\n\r\nfunction useChart() {\r\n  const context = React.useContext(ChartContext)\r\n\r\n  if (!context) {\r\n    throw new Error(\"useChart must be used within a <ChartContainer />\")\r\n  }\r\n\r\n  return context\r\n}\r\n\r\nconst ChartContainer = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> & {\r\n    config: ChartConfig\r\n    children: React.ComponentProps<\r\n      typeof RechartsPrimitive.ResponsiveContainer\r\n    >[\"children\"]\r\n  }\r\n>(({ id, className, children, config, ...props }, ref) => {\r\n  const uniqueId = React.useId()\r\n  const chartId = `chart-${id || uniqueId.replace(/:/g, \"\")}`\r\n\r\n  return (\r\n    <ChartContext.Provider value={{ config }}>\r\n      <div\r\n        data-chart={chartId}\r\n        ref={ref}\r\n        className={cn(\r\n          \"flex aspect-video justify-center text-xs [&_.recharts-cartesian-axis-tick_text]:fill-muted-foreground [&_.recharts-cartesian-grid_line[stroke='#ccc']]:stroke-border/50 [&_.recharts-curve.recharts-tooltip-cursor]:stroke-border [&_.recharts-dot[stroke='#fff']]:stroke-transparent [&_.recharts-layer]:outline-none [&_.recharts-polar-grid_[stroke='#ccc']]:stroke-border [&_.recharts-radial-bar-background-sector]:fill-muted [&_.recharts-rectangle.recharts-tooltip-cursor]:fill-muted [&_.recharts-reference-line_[stroke='#ccc']]:stroke-border [&_.recharts-sector[stroke='#fff']]:stroke-transparent [&_.recharts-sector]:outline-none [&_.recharts-surface]:outline-none\",\r\n          className\r\n        )}\r\n        {...props}\r\n      >\r\n        <ChartStyle id={chartId} config={config} />\r\n        <RechartsPrimitive.ResponsiveContainer>\r\n          {children}\r\n        </RechartsPrimitive.ResponsiveContainer>\r\n      </div>\r\n    </ChartContext.Provider>\r\n  )\r\n})\r\nChartContainer.displayName = \"Chart\"\r\n\r\nconst ChartStyle = ({ id, config }: { id: string; config: ChartConfig }) => {\r\n  const colorConfig = Object.entries(config).filter(\r\n    ([, config]) => config.theme || config.color\r\n  )\r\n\r\n  if (!colorConfig.length) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <style\r\n      dangerouslySetInnerHTML={{\r\n        __html: Object.entries(THEMES)\r\n          .map(\r\n            ([theme, prefix]) => `\r\n${prefix} [data-chart=${id}] {\r\n${colorConfig\r\n  .map(([key, itemConfig]) => {\r\n    const color =\r\n      itemConfig.theme?.[theme as keyof typeof itemConfig.theme] ||\r\n      itemConfig.color\r\n    return color ? `  --color-${key}: ${color};` : null\r\n  })\r\n  .join(\"\\n\")}\r\n}\r\n`\r\n          )\r\n          .join(\"\\n\"),\r\n      }}\r\n    />\r\n  )\r\n}\r\n\r\nconst ChartTooltip = RechartsPrimitive.Tooltip\r\n\r\nconst ChartTooltipContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<typeof RechartsPrimitive.Tooltip> &\r\n    React.ComponentProps<\"div\"> & {\r\n      hideLabel?: boolean\r\n      hideIndicator?: boolean\r\n      indicator?: \"line\" | \"dot\" | \"dashed\"\r\n      nameKey?: string\r\n      labelKey?: string\r\n    }\r\n>(\r\n  (\r\n    {\r\n      active,\r\n      payload,\r\n      className,\r\n      indicator = \"dot\",\r\n      hideLabel = false,\r\n      hideIndicator = false,\r\n      label,\r\n      labelFormatter,\r\n      labelClassName,\r\n      formatter,\r\n      color,\r\n      nameKey,\r\n      labelKey,\r\n    },\r\n    ref\r\n  ) => {\r\n    const { config } = useChart()\r\n\r\n    const tooltipLabel = React.useMemo(() => {\r\n      if (hideLabel || !payload?.length) {\r\n        return null\r\n      }\r\n\r\n      const [item] = payload\r\n      const key = `${labelKey || item.dataKey || item.name || \"value\"}`\r\n      const itemConfig = getPayloadConfigFromPayload(config, item, key)\r\n      const value =\r\n        !labelKey && typeof label === \"string\"\r\n          ? config[label as keyof typeof config]?.label || label\r\n          : itemConfig?.label\r\n\r\n      if (labelFormatter) {\r\n        return (\r\n          <div className={cn(\"font-medium\", labelClassName)}>\r\n            {labelFormatter(value, payload)}\r\n          </div>\r\n        )\r\n      }\r\n\r\n      if (!value) {\r\n        return null\r\n      }\r\n\r\n      return <div className={cn(\"font-medium\", labelClassName)}>{value}</div>\r\n    }, [\r\n      label,\r\n      labelFormatter,\r\n      payload,\r\n      hideLabel,\r\n      labelClassName,\r\n      config,\r\n      labelKey,\r\n    ])\r\n\r\n    if (!active || !payload?.length) {\r\n      return null\r\n    }\r\n\r\n    const nestLabel = payload.length === 1 && indicator !== \"dot\"\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        className={cn(\r\n          \"grid min-w-[8rem] items-start gap-1.5 rounded-lg border border-border/50 bg-background px-2.5 py-1.5 text-xs shadow-xl\",\r\n          className\r\n        )}\r\n      >\r\n        {!nestLabel ? tooltipLabel : null}\r\n        <div className=\"grid gap-1.5\">\r\n          {payload.map((item, index) => {\r\n            const key = `${nameKey || item.name || item.dataKey || \"value\"}`\r\n            const itemConfig = getPayloadConfigFromPayload(config, item, key)\r\n            const indicatorColor = color || item.payload.fill || item.color\r\n\r\n            return (\r\n              <div\r\n                key={item.dataKey}\r\n                className={cn(\r\n                  \"flex w-full flex-wrap items-stretch gap-2 [&>svg]:h-2.5 [&>svg]:w-2.5 [&>svg]:text-muted-foreground\",\r\n                  indicator === \"dot\" && \"items-center\"\r\n                )}\r\n              >\r\n                {formatter && item?.value !== undefined && item.name ? (\r\n                  formatter(item.value, item.name, item, index, item.payload)\r\n                ) : (\r\n                  <>\r\n                    {itemConfig?.icon ? (\r\n                      <itemConfig.icon />\r\n                    ) : (\r\n                      !hideIndicator && (\r\n                        <div\r\n                          className={cn(\r\n                            \"shrink-0 rounded-[2px] border-[--color-border] bg-[--color-bg]\",\r\n                            {\r\n                              \"h-2.5 w-2.5\": indicator === \"dot\",\r\n                              \"w-1\": indicator === \"line\",\r\n                              \"w-0 border-[1.5px] border-dashed bg-transparent\":\r\n                                indicator === \"dashed\",\r\n                              \"my-0.5\": nestLabel && indicator === \"dashed\",\r\n                            }\r\n                          )}\r\n                          style={\r\n                            {\r\n                              \"--color-bg\": indicatorColor,\r\n                              \"--color-border\": indicatorColor,\r\n                            } as React.CSSProperties\r\n                          }\r\n                        />\r\n                      )\r\n                    )}\r\n                    <div\r\n                      className={cn(\r\n                        \"flex flex-1 justify-between leading-none\",\r\n                        nestLabel ? \"items-end\" : \"items-center\"\r\n                      )}\r\n                    >\r\n                      <div className=\"grid gap-1.5\">\r\n                        {nestLabel ? tooltipLabel : null}\r\n                        <span className=\"text-muted-foreground\">\r\n                          {itemConfig?.label || item.name}\r\n                        </span>\r\n                      </div>\r\n                      {item.value && (\r\n                        <span className=\"font-mono font-medium tabular-nums text-foreground\">\r\n                          {item.value.toLocaleString()}\r\n                        </span>\r\n                      )}\r\n                    </div>\r\n                  </>\r\n                )}\r\n              </div>\r\n            )\r\n          })}\r\n        </div>\r\n      </div>\r\n    )\r\n  }\r\n)\r\nChartTooltipContent.displayName = \"ChartTooltip\"\r\n\r\nconst ChartLegend = RechartsPrimitive.Legend\r\n\r\nconst ChartLegendContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.ComponentProps<\"div\"> &\r\n    Pick<RechartsPrimitive.LegendProps, \"payload\" | \"verticalAlign\"> & {\r\n      hideIcon?: boolean\r\n      nameKey?: string\r\n    }\r\n>(\r\n  (\r\n    { className, hideIcon = false, payload, verticalAlign = \"bottom\", nameKey },\r\n    ref\r\n  ) => {\r\n    const { config } = useChart()\r\n\r\n    if (!payload?.length) {\r\n      return null\r\n    }\r\n\r\n    return (\r\n      <div\r\n        ref={ref}\r\n        className={cn(\r\n          \"flex items-center justify-center gap-4\",\r\n          verticalAlign === \"top\" ? \"pb-3\" : \"pt-3\",\r\n          className\r\n        )}\r\n      >\r\n        {payload.map((item) => {\r\n          const key = `${nameKey || item.dataKey || \"value\"}`\r\n          const itemConfig = getPayloadConfigFromPayload(config, item, key)\r\n\r\n          return (\r\n            <div\r\n              key={item.value}\r\n              className={cn(\r\n                \"flex items-center gap-1.5 [&>svg]:h-3 [&>svg]:w-3 [&>svg]:text-muted-foreground\"\r\n              )}\r\n            >\r\n              {itemConfig?.icon && !hideIcon ? (\r\n                <itemConfig.icon />\r\n              ) : (\r\n                <div\r\n                  className=\"h-2 w-2 shrink-0 rounded-[2px]\"\r\n                  style={{\r\n                    backgroundColor: item.color,\r\n                  }}\r\n                />\r\n              )}\r\n              {itemConfig?.label}\r\n            </div>\r\n          )\r\n        })}\r\n      </div>\r\n    )\r\n  }\r\n)\r\nChartLegendContent.displayName = \"ChartLegend\"\r\n\r\n// Helper to extract item config from a payload.\r\nfunction getPayloadConfigFromPayload(\r\n  config: ChartConfig,\r\n  payload: unknown,\r\n  key: string\r\n) {\r\n  if (typeof payload !== \"object\" || payload === null) {\r\n    return undefined\r\n  }\r\n\r\n  const payloadPayload =\r\n    \"payload\" in payload &&\r\n    typeof payload.payload === \"object\" &&\r\n    payload.payload !== null\r\n      ? payload.payload\r\n      : undefined\r\n\r\n  let configLabelKey: string = key\r\n\r\n  if (\r\n    key in payload &&\r\n    typeof payload[key as keyof typeof payload] === \"string\"\r\n  ) {\r\n    configLabelKey = payload[key as keyof typeof payload] as string\r\n  } else if (\r\n    payloadPayload &&\r\n    key in payloadPayload &&\r\n    typeof payloadPayload[key as keyof typeof payloadPayload] === \"string\"\r\n  ) {\r\n    configLabelKey = payloadPayload[\r\n      key as keyof typeof payloadPayload\r\n    ] as string\r\n  }\r\n\r\n  return configLabelKey in config\r\n    ? config[configLabelKey]\r\n    : config[key as keyof typeof config]\r\n}\r\n\r\nexport {\r\n  ChartContainer,\r\n  ChartTooltip,\r\n  ChartTooltipContent,\r\n  ChartLegend,\r\n  ChartLegendContent,\r\n  ChartStyle,\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 868, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/components/forms/market-analyser-form.tsx"],"sourcesContent":["\r\n'use client';\r\n\r\nimport { useState } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport * as z from 'zod';\r\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\r\nimport { Textarea } from '@/components/ui/textarea';\r\nimport { Loader2, TrendingUp, LineChart, Lightbulb } from 'lucide-react';\r\nimport { predictMarketPrice, type MarketPricePredictionOutput } from '@/ai/flows/market-price-prediction';\r\nimport { useTranslation } from '@/hooks/use-translation';\r\nimport { CartesianGrid, Line, XAxis, YAxis, ResponsiveContainer, Tooltip, Legend, LineChart as RechartsLineChart } from 'recharts';\r\nimport { ChartContainer, ChartTooltip, ChartTooltipContent, ChartLegend, ChartLegendContent } from '@/components/ui/chart';\r\n\r\n\r\nconst formSchema = z.object({\r\n  description: z.string().min(3, 'Please enter a more detailed description.'),\r\n});\r\n\r\nconst texts = {\r\n    formTitle: \"Predict Commodity Price\",\r\n    formDescription: \"Describe the commodity you want a price prediction for.\",\r\n    commodityLabel: \"Product Description\",\r\n    commodityPlaceholder: \"e.g., 'I want to know the price for long-staple cotton from Gujarat.' or simply 'Paddy'\",\r\n    predictButton: \"Predict Price\",\r\n    resultTitle: \"Price Prediction Analysis\",\r\n    resultDescription: \"AI-powered market analysis and price forecast.\",\r\n    analysis: \"Analysis\",\r\n    priceForecast: \"4-Week Price Forecast\",\r\n    suggestion: \"AI Suggestion\",\r\n    resultsPlaceholder: \"Your price prediction will appear here.\",\r\n    quotaError: \"You have exceeded your API quota. Please try again later or check your billing plan.\",\r\n    noDataError: \"No market data found for this commodity. It might be a rare commodity or the data is not available in the recent records. Please try a different one.\",\r\n    identificationError: \"Could not identify a valid commodity from your description. Please be more specific.\",\r\n    networkError: \"A network error occurred. This may be due to restrictions in the development environment that block outbound API calls. Consider using a proxy or serverless function to access the external API.\"\r\n};\r\n\r\nexport function MarketAnalyserForm() {\r\n  const [result, setResult] = useState<MarketPricePredictionOutput | null>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const { t } = useTranslation(texts);\r\n\r\n  const form = useForm<z.infer<typeof formSchema>>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      description: '',\r\n    },\r\n  });\r\n\r\n  const onSubmit = async (values: z.infer<typeof formSchema>) => {\r\n    setLoading(true);\r\n    setResult(null);\r\n    setError(null);\r\n    try {\r\n      const response = await predictMarketPrice({ commodity: values.description });\r\n      setResult(response);\r\n    } catch (e: any) {\r\n      console.error(e);\r\n      if (e.message?.includes('429')) {\r\n        setError(t('quotaError'));\r\n      } else if (e.message?.includes('No market data found')) {\r\n        setError(t('noDataError'));\r\n      } else if (e.message?.includes('Could not identify a valid commodity')) {\r\n        setError(t('identificationError'));\r\n      } else if (e.message?.includes('network error occurred')) {\r\n        setError(t('networkError'));\r\n      }\r\n       else {\r\n        setError('An error occurred while predicting the price.');\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const chartConfig = {\r\n    price: {\r\n      label: \"Price (₹)\",\r\n      color: \"hsl(var(--chart-1))\",\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"font-headline\">{t('formTitle')}</CardTitle>\r\n          <CardDescription>{t('formDescription')}</CardDescription>\r\n        </CardHeader>\r\n        <Form {...form}>\r\n          <form onSubmit={form.handleSubmit(onSubmit)}>\r\n            <CardContent>\r\n              <FormField\r\n                control={form.control}\r\n                name=\"description\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel>{t('commodityLabel')}</FormLabel>\r\n                    <FormControl>\r\n                      <Textarea placeholder={t('commodityPlaceholder')} {...field} rows={4} />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n            </CardContent>\r\n            <CardFooter>\r\n              <Button type=\"submit\" disabled={loading} className=\"w-full\">\r\n                {loading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\r\n                {t('predictButton')}\r\n              </Button>\r\n            </CardFooter>\r\n          </form>\r\n        </Form>\r\n      </Card>\r\n      \r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"font-headline\">{t('resultTitle')}</CardTitle>\r\n          <CardDescription>{t('resultDescription')}</CardDescription>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {loading && (\r\n            <div className=\"flex justify-center items-center h-full min-h-[300px]\">\r\n              <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\r\n            </div>\r\n          )}\r\n          {error && <p className=\"text-destructive\">{error}</p>}\r\n          \r\n          {result && !loading && (\r\n            <div className=\"space-y-6\">\r\n                <div>\r\n                  <h3 className=\"font-semibold text-lg mb-2\">{t('priceForecast')}</h3>\r\n                   <ChartContainer config={chartConfig} className=\"h-[250px] w-full\">\r\n                    <RechartsLineChart data={result.weeklyForecast} margin={{ top: 5, right: 20, left: -10, bottom: 5 }}>\r\n                      <CartesianGrid strokeDasharray=\"3 3\" />\r\n                      <XAxis dataKey=\"week\" />\r\n                      <YAxis domain={['dataMin - 100', 'dataMax + 100']} tickFormatter={(value) => `₹${value}`} />\r\n                      <ChartTooltip\r\n                        cursor={false}\r\n                        content={<ChartTooltipContent indicator=\"dot\" />}\r\n                      />\r\n                      <ChartLegend content={<ChartLegendContent />} />\r\n                      <Line dataKey=\"price\" type=\"monotone\" stroke=\"var(--color-price)\" strokeWidth={2} dot={{ fill: \"var(--color-price)\" }} activeDot={{ r: 6 }}/>\r\n                    </RechartsLineChart>\r\n                  </ChartContainer>\r\n                </div>\r\n                <div className=\"flex items-start gap-4\">\r\n                  <div className=\"p-3 bg-primary/10 rounded-full mt-1\">\r\n                    <LineChart className=\"h-6 w-6 text-primary\" />\r\n                  </div>\r\n                  <div>\r\n                    <h3 className=\"font-semibold\">{t('analysis')}</h3>\r\n                    <p className=\"text-sm text-muted-foreground\">{result.analysis}</p>\r\n\r\n                  </div>\r\n                </div>\r\n                <div className=\"flex items-start gap-4\">\r\n                  <div className=\"p-3 bg-accent/10 rounded-full mt-1\">\r\n                    <Lightbulb className=\"h-6 w-6 text-accent\" />\r\n                  </div>\r\n                  <div>\r\n                    <h3 className=\"font-semibold\">{t('suggestion')}</h3>\r\n                    <p className=\"text-sm font-bold text-accent-foreground\">{result.suggestion}</p>\r\n                  </div>\r\n                </div>\r\n            </div>\r\n          )}\r\n          {!loading && !result && !error && (\r\n            <div className=\"text-center text-muted-foreground py-10\">\r\n              {t('resultsPlaceholder')}\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n\r\n    \r\n"],"names":[],"mappings":";;;;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AACA;;;AAdA;;;;;;;;;;;;;;AAiBA,MAAM,aAAa,CAAA,GAAA,uIAAA,CAAA,SAAQ,AAAD,EAAE;IAC1B,aAAa,CAAA,GAAA,uIAAA,CAAA,SAAQ,AAAD,IAAI,GAAG,CAAC,GAAG;AACjC;AAEA,MAAM,QAAQ;IACV,WAAW;IACX,iBAAiB;IACjB,gBAAgB;IAChB,sBAAsB;IACtB,eAAe;IACf,aAAa;IACb,mBAAmB;IACnB,UAAU;IACV,eAAe;IACf,YAAY;IACZ,oBAAoB;IACpB,YAAY;IACZ,aAAa;IACb,qBAAqB;IACrB,cAAc;AAClB;AAEO,SAAS;;IACd,MAAM,CAAC,QAAQ,UAAU,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAsC;IACzE,MAAM,CAAC,OAAO,SAAS,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAiB;IAClD,MAAM,CAAC,SAAS,WAAW,GAAG,CAAA,GAAA,6JAAA,CAAA,WAAQ,AAAD,EAAE;IACvC,MAAM,EAAE,CAAC,EAAE,GAAG,CAAA,GAAA,sIAAA,CAAA,iBAAc,AAAD,EAAE;IAE7B,MAAM,OAAO,CAAA,GAAA,iKAAA,CAAA,UAAO,AAAD,EAA8B;QAC/C,UAAU,CAAA,GAAA,iKAAA,CAAA,cAAW,AAAD,EAAE;QACtB,eAAe;YACb,aAAa;QACf;IACF;IAEA,MAAM,WAAW,OAAO;QACtB,WAAW;QACX,UAAU;QACV,SAAS;QACT,IAAI;YACF,MAAM,WAAW,MAAM,CAAA,GAAA,6JAAA,CAAA,qBAAkB,AAAD,EAAE;gBAAE,WAAW,OAAO,WAAW;YAAC;YAC1E,UAAU;QACZ,EAAE,OAAO,GAAQ;YACf,QAAQ,KAAK,CAAC;YACd,IAAI,EAAE,OAAO,EAAE,SAAS,QAAQ;gBAC9B,SAAS,EAAE;YACb,OAAO,IAAI,EAAE,OAAO,EAAE,SAAS,yBAAyB;gBACtD,SAAS,EAAE;YACb,OAAO,IAAI,EAAE,OAAO,EAAE,SAAS,yCAAyC;gBACtE,SAAS,EAAE;YACb,OAAO,IAAI,EAAE,OAAO,EAAE,SAAS,2BAA2B;gBACxD,SAAS,EAAE;YACb,OACM;gBACJ,SAAS;YACX;QACF,SAAU;YACR,WAAW;QACb;IACF;IAEA,MAAM,cAAc;QAClB,OAAO;YACL,OAAO;YACP,OAAO;QACT;IACF;IAEA,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC,mIAAA,CAAA,OAAI;;kCACH,6LAAC,mIAAA,CAAA,aAAU;;0CACT,6LAAC,mIAAA,CAAA,YAAS;gCAAC,WAAU;0CAAiB,EAAE;;;;;;0CACxC,6LAAC,mIAAA,CAAA,kBAAe;0CAAE,EAAE;;;;;;;;;;;;kCAEtB,6LAAC,mIAAA,CAAA,OAAI;wBAAE,GAAG,IAAI;kCACZ,cAAA,6LAAC;4BAAK,UAAU,KAAK,YAAY,CAAC;;8CAChC,6LAAC,mIAAA,CAAA,cAAW;8CACV,cAAA,6LAAC,mIAAA,CAAA,YAAS;wCACR,SAAS,KAAK,OAAO;wCACrB,MAAK;wCACL,QAAQ,CAAC,EAAE,KAAK,EAAE,iBAChB,6LAAC,mIAAA,CAAA,WAAQ;;kEACP,6LAAC,mIAAA,CAAA,YAAS;kEAAE,EAAE;;;;;;kEACd,6LAAC,mIAAA,CAAA,cAAW;kEACV,cAAA,6LAAC,uIAAA,CAAA,WAAQ;4DAAC,aAAa,EAAE;4DAA0B,GAAG,KAAK;4DAAE,MAAM;;;;;;;;;;;kEAErE,6LAAC,mIAAA,CAAA,cAAW;;;;;;;;;;;;;;;;;;;;;8CAKpB,6LAAC,mIAAA,CAAA,aAAU;8CACT,cAAA,6LAAC,qIAAA,CAAA,SAAM;wCAAC,MAAK;wCAAS,UAAU;wCAAS,WAAU;;4CAChD,yBAAW,6LAAC,oNAAA,CAAA,UAAO;gDAAC,WAAU;;;;;;4CAC9B,EAAE;;;;;;;;;;;;;;;;;;;;;;;;;;;;;0BAOb,6LAAC,mIAAA,CAAA,OAAI;;kCACH,6LAAC,mIAAA,CAAA,aAAU;;0CACT,6LAAC,mIAAA,CAAA,YAAS;gCAAC,WAAU;0CAAiB,EAAE;;;;;;0CACxC,6LAAC,mIAAA,CAAA,kBAAe;0CAAE,EAAE;;;;;;;;;;;;kCAEtB,6LAAC,mIAAA,CAAA,cAAW;;4BACT,yBACC,6LAAC;gCAAI,WAAU;0CACb,cAAA,6LAAC,oNAAA,CAAA,UAAO;oCAAC,WAAU;;;;;;;;;;;4BAGtB,uBAAS,6LAAC;gCAAE,WAAU;0CAAoB;;;;;;4BAE1C,UAAU,CAAC,yBACV,6LAAC;gCAAI,WAAU;;kDACX,6LAAC;;0DACC,6LAAC;gDAAG,WAAU;0DAA8B,EAAE;;;;;;0DAC7C,6LAAC,oIAAA,CAAA,iBAAc;gDAAC,QAAQ;gDAAa,WAAU;0DAC9C,cAAA,6LAAC,wJAAA,CAAA,YAAiB;oDAAC,MAAM,OAAO,cAAc;oDAAE,QAAQ;wDAAE,KAAK;wDAAG,OAAO;wDAAI,MAAM,CAAC;wDAAI,QAAQ;oDAAE;;sEAChG,6LAAC,gKAAA,CAAA,gBAAa;4DAAC,iBAAgB;;;;;;sEAC/B,6LAAC,wJAAA,CAAA,QAAK;4DAAC,SAAQ;;;;;;sEACf,6LAAC,wJAAA,CAAA,QAAK;4DAAC,QAAQ;gEAAC;gEAAiB;6DAAgB;4DAAE,eAAe,CAAC,QAAU,CAAC,CAAC,EAAE,OAAO;;;;;;sEACxF,6LAAC,oIAAA,CAAA,eAAY;4DACX,QAAQ;4DACR,uBAAS,6LAAC,oIAAA,CAAA,sBAAmB;gEAAC,WAAU;;;;;;;;;;;sEAE1C,6LAAC,oIAAA,CAAA,cAAW;4DAAC,uBAAS,6LAAC,oIAAA,CAAA,qBAAkB;;;;;;;;;;sEACzC,6LAAC,uJAAA,CAAA,OAAI;4DAAC,SAAQ;4DAAQ,MAAK;4DAAW,QAAO;4DAAqB,aAAa;4DAAG,KAAK;gEAAE,MAAM;4DAAqB;4DAAG,WAAW;gEAAE,GAAG;4DAAE;;;;;;;;;;;;;;;;;;;;;;;kDAI/I,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAI,WAAU;0DACb,cAAA,6LAAC,mNAAA,CAAA,YAAS;oDAAC,WAAU;;;;;;;;;;;0DAEvB,6LAAC;;kEACC,6LAAC;wDAAG,WAAU;kEAAiB,EAAE;;;;;;kEACjC,6LAAC;wDAAE,WAAU;kEAAiC,OAAO,QAAQ;;;;;;;;;;;;;;;;;;kDAIjE,6LAAC;wCAAI,WAAU;;0DACb,6LAAC;gDAAI,WAAU;0DACb,cAAA,6LAAC,+MAAA,CAAA,YAAS;oDAAC,WAAU;;;;;;;;;;;0DAEvB,6LAAC;;kEACC,6LAAC;wDAAG,WAAU;kEAAiB,EAAE;;;;;;kEACjC,6LAAC;wDAAE,WAAU;kEAA4C,OAAO,UAAU;;;;;;;;;;;;;;;;;;;;;;;;4BAKnF,CAAC,WAAW,CAAC,UAAU,CAAC,uBACvB,6LAAC;gCAAI,WAAU;0CACZ,EAAE;;;;;;;;;;;;;;;;;;;;;;;;AAOjB;GA7IgB;;QAIA,sIAAA,CAAA,iBAAc;QAEf,iKAAA,CAAA,UAAO;;;KANN","debugId":null}},
    {"offset": {"line": 1397, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/app/market-analyser/page.tsx"],"sourcesContent":["\r\n'use client';\r\nimport { PageHeader, PageHeaderHeading, PageHeaderDescription } from '@/components/page-header';\r\nimport { MarketAnalyserForm } from '@/components/forms/market-analyser-form';\r\nimport { useTranslation } from '@/hooks/use-translation';\r\n\r\nconst texts = {\r\n  title: \"Market Analyser\",\r\n  description: \"Predict future commodity prices based on historical market data. Enter a commodity name to get started.\",\r\n};\r\n\r\nexport default function MarketAnalyserPage() {\r\n  const { t } = useTranslation(texts);\r\n  return (\r\n    <div className=\"container mx-auto py-8 px-4 md:px-6\">\r\n      <PageHeader>\r\n        <PageHeaderHeading className=\"font-headline\">{t('title')}</PageHeaderHeading>\r\n        <PageHeaderDescription>\r\n          {t('description')}\r\n        </PageHeaderDescription>\r\n      </PageHeader>\r\n      <div className=\"mt-8\">\r\n        <MarketAnalyserForm />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;;;AAHA;;;;AAKA,MAAM,QAAQ;IACZ,OAAO;IACP,aAAa;AACf;AAEe,SAAS;;IACtB,MAAM,EAAE,CAAC,EAAE,GAAG,CAAA,GAAA,sIAAA,CAAA,iBAAc,AAAD,EAAE;IAC7B,qBACE,6LAAC;QAAI,WAAU;;0BACb,6LAAC,uIAAA,CAAA,aAAU;;kCACT,6LAAC,uIAAA,CAAA,oBAAiB;wBAAC,WAAU;kCAAiB,EAAE;;;;;;kCAChD,6LAAC,uIAAA,CAAA,wBAAqB;kCACnB,EAAE;;;;;;;;;;;;0BAGP,6LAAC;gBAAI,WAAU;0BACb,cAAA,6LAAC,4JAAA,CAAA,qBAAkB;;;;;;;;;;;;;;;;AAI3B;GAfwB;;QACR,sIAAA,CAAA,iBAAc;;;KADN","debugId":null}}]
}