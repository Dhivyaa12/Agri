{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\r\nimport {googleAI} from '@genkit-ai/googleai';\r\n\r\nexport const ai = genkit({\r\n  plugins: [googleAI()],\r\n  model: 'googleai/gemini-2.0-flash',\r\n});\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/ai/flows/translate-text.ts"],"sourcesContent":["\r\n'use server';\r\n\r\n/**\r\n * @fileOverview A text translation flow using Genkit and Google AI.\r\n * \r\n * - translateText - Translates text to a specified target language.\r\n * - TranslateTextInput - The input type for the translateText function.\r\n * - TranslateTextOutput - The return type for the translateText function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\n\r\nconst TranslateTextInputSchema = z.object({\r\n  text: z.string().describe('The text to be translated. This may contain multiple lines separated by \"\\\\n---\\\\n\".'),\r\n  targetLanguage: z.string().describe('The target language for translation (e.g., \"hi\", \"ta\").'),\r\n});\r\nexport type TranslateTextInput = z.infer<typeof TranslateTextInputSchema>;\r\n\r\nconst TranslateTextOutputSchema = z.object({\r\n  translatedText: z.string().describe('The translated text, preserving the \"\\\\n---\\\\n\" separators.'),\r\n});\r\nexport type TranslateTextOutput = z.infer<typeof TranslateTextOutputSchema>;\r\n\r\nexport async function translateText(input: TranslateTextInput): Promise<TranslateTextOutput> {\r\n  return translateTextFlow(input);\r\n}\r\n\r\nconst translateTextFlow = ai.defineFlow(\r\n  {\r\n    name: 'translateTextFlow',\r\n    inputSchema: TranslateTextInputSchema,\r\n    outputSchema: TranslateTextOutputSchema,\r\n  },\r\n  async ({ text, targetLanguage }) => {\r\n    // Handle cases where the text might be empty or just separators\r\n    if (!text.trim() || text.trim() === '---') {\r\n      return { translatedText: text };\r\n    }\r\n\r\n    const { text: translatedText } = await ai.generate({\r\n      model: 'googleai/gemini-2.0-flash',\r\n      prompt: `Translate the following text to the language with code '${targetLanguage}'. The text may contain multiple distinct entries separated by \"\\\\n---\\\\n\". Maintain this separator in your output. Return only the translated text, preserving the separators exactly as they appear in the input.\\n\\nText to translate: \"${text}\"`,\r\n    });\r\n    \r\n    return {\r\n      translatedText,\r\n    };\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;AAGA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACtC;AAGA,MAAM,4BAA4B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACtC;AAGO,eAAe,cAAc,KAAyB;IAC3D,OAAO,kBAAkB;AAC3B;AAEA,MAAM,oBAAoB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACrC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO,EAAE,IAAI,EAAE,cAAc,EAAE;IAC7B,gEAAgE;IAChE,IAAI,CAAC,KAAK,IAAI,MAAM,KAAK,IAAI,OAAO,OAAO;QACzC,OAAO;YAAE,gBAAgB;QAAK;IAChC;IAEA,MAAM,EAAE,MAAM,cAAc,EAAE,GAAG,MAAM,mHAAA,CAAA,KAAE,CAAC,QAAQ,CAAC;QACjD,OAAO;QACP,QAAQ,CAAC,wDAAwD,EAAE,eAAe,2OAA2O,EAAE,KAAK,CAAC,CAAC;IACxU;IAEA,OAAO;QACL;IACF;AACF;;;IAxBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 300, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/ai/flows/market-data.ts"],"sourcesContent":["'use server';\r\n/**\r\n * @fileOverview A flow for fetching market data.\r\n *\r\n * - getAllMarketData - A function that fetches market data.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\nimport localMarketData from '@/lib/market-data.json';\r\n\r\nconst MarketDataSchema = z.object({\r\n  state: z.string().nullable(),\r\n  district: z.string().nullable(),\r\n  market: z.string().nullable(),\r\n  commodity: z.string().nullable(),\r\n  variety: z.string().nullable(),\r\n  arrival_date: z.string().nullable(),\r\n  min_price: z.string().nullable(),\r\n  max_price: z.string().nullable(),\r\n  modal_price: z.string().nullable(),\r\n});\r\ntype MarketData = z.infer<typeof MarketDataSchema>;\r\n\r\nlet cachedData: MarketData[] | null = null;\r\nlet lastFetchTime: number | null = null;\r\nconst CACHE_DURATION = 60 * 60 * 1000; // 1 hour\r\n\r\nasync function fetchAllMarketData(): Promise<MarketData[]> {\r\n  const apiKey = process.env.DATA_GOV_API_KEY || '579b464db66ec23bdd000001cdd3946e44ce4aad7209ff7b23ac571b';\r\n  const resourceId = '9ef84268-d588-465a-a308-a864a43d0070';\r\n  const baseUrl = `https://api.data.gov.in/resource/${resourceId}?api-key=${apiKey}&format=json`;\r\n  \r\n  let allRecords: MarketData[] = [];\r\n  let offset = 0;\r\n  const limit = 1000;\r\n  let hasMore = true;\r\n\r\n  while(hasMore) {\r\n    const url = `${baseUrl}&offset=${offset}&limit=${limit}`;\r\n    const response = await fetch(url);\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`API request failed with status ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n\r\n    if (data.records && data.records.length > 0) {\r\n        allRecords = allRecords.concat(data.records.map((record: any) => ({\r\n            state: record.state || null,\r\n            district: record.district || null,\r\n            market: record.market || null,\r\n            commodity: record.commodity || null,\r\n            variety: record.variety || null,\r\n            arrival_date: record.arrival_date || null,\r\n            min_price: record.min_price || null,\r\n            max_price: record.max_price || null,\r\n            modal_price: record.modal_price || null,\r\n        })));\r\n        offset += data.records.length;\r\n    } else {\r\n        hasMore = false;\r\n    }\r\n    \r\n    if (data.records.length < limit) {\r\n        hasMore = false;\r\n    }\r\n  }\r\n  \r\n  return allRecords;\r\n}\r\n\r\nexport async function getAllMarketData(): Promise<MarketData[]> {\r\n    return getAllMarketDataFlow();\r\n}\r\n\r\nconst getAllMarketDataFlow = ai.defineFlow(\r\n  {\r\n    name: 'getAllMarketDataFlow',\r\n    outputSchema: z.array(MarketDataSchema),\r\n  },\r\n  async () => {\r\n    const now = Date.now();\r\n    if (cachedData && lastFetchTime && now - lastFetchTime < CACHE_DURATION) {\r\n      return cachedData;\r\n    }\r\n\r\n    try {\r\n      const data = await fetchAllMarketData();\r\n      cachedData = data;\r\n      lastFetchTime = now;\r\n      return data;\r\n    } catch (error: any) {\r\n        console.error(\"Failed to fetch live data, falling back to local data.\", error);\r\n        return localMarketData as MarketData[];\r\n    }\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;AACA;;;;CAIC,GAED;AACA;AAAA;AACA;;;;;;;AAEA,MAAM,mBAAmB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChC,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC1B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC3B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC9B,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC5B,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IACjC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC9B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC9B,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;AAClC;AAGA,IAAI,aAAkC;AACtC,IAAI,gBAA+B;AACnC,MAAM,iBAAiB,KAAK,KAAK,MAAM,SAAS;AAEhD,eAAe;IACb,MAAM,SAAS,QAAQ,GAAG,CAAC,gBAAgB,IAAI;IAC/C,MAAM,aAAa;IACnB,MAAM,UAAU,CAAC,iCAAiC,EAAE,WAAW,SAAS,EAAE,OAAO,YAAY,CAAC;IAE9F,IAAI,aAA2B,EAAE;IACjC,IAAI,SAAS;IACb,MAAM,QAAQ;IACd,IAAI,UAAU;IAEd,MAAM,QAAS;QACb,MAAM,MAAM,GAAG,QAAQ,QAAQ,EAAE,OAAO,OAAO,EAAE,OAAO;QACxD,MAAM,WAAW,MAAM,MAAM;QAE7B,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,+BAA+B,EAAE,SAAS,MAAM,EAAE;QACrE;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,IAAI,KAAK,OAAO,IAAI,KAAK,OAAO,CAAC,MAAM,GAAG,GAAG;YACzC,aAAa,WAAW,MAAM,CAAC,KAAK,OAAO,CAAC,GAAG,CAAC,CAAC,SAAgB,CAAC;oBAC9D,OAAO,OAAO,KAAK,IAAI;oBACvB,UAAU,OAAO,QAAQ,IAAI;oBAC7B,QAAQ,OAAO,MAAM,IAAI;oBACzB,WAAW,OAAO,SAAS,IAAI;oBAC/B,SAAS,OAAO,OAAO,IAAI;oBAC3B,cAAc,OAAO,YAAY,IAAI;oBACrC,WAAW,OAAO,SAAS,IAAI;oBAC/B,WAAW,OAAO,SAAS,IAAI;oBAC/B,aAAa,OAAO,WAAW,IAAI;gBACvC,CAAC;YACD,UAAU,KAAK,OAAO,CAAC,MAAM;QACjC,OAAO;YACH,UAAU;QACd;QAEA,IAAI,KAAK,OAAO,CAAC,MAAM,GAAG,OAAO;YAC7B,UAAU;QACd;IACF;IAEA,OAAO;AACT;AAEO,eAAe;IAClB,OAAO;AACX;AAEA,MAAM,uBAAuB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACxC;IACE,MAAM;IACN,cAAc,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC;AACxB,GACA;IACE,MAAM,MAAM,KAAK,GAAG;IACpB,IAAI,cAAc,iBAAiB,MAAM,gBAAgB,gBAAgB;QACvE,OAAO;IACT;IAEA,IAAI;QACF,MAAM,OAAO,MAAM;QACnB,aAAa;QACb,gBAAgB;QAChB,OAAO;IACT,EAAE,OAAO,OAAY;QACjB,QAAQ,KAAK,CAAC,0DAA0D;QACxE,OAAO,oGAAA,CAAA,UAAe;IAC1B;AACF;;;IAxBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 402, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/ai/flows/market-price-prediction.ts"],"sourcesContent":["\r\n'use server';\r\n/**\r\n * @fileOverview A market price prediction AI agent.\r\n *\r\n * - predictMarketPrice - A function that handles the price prediction process.\r\n * - MarketPricePredictionInput - The input type for the predictMarketPrice function.\r\n * - MarketPricePredictionOutput - The return type for the predict_price function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\nimport { getAllMarketData } from './market-data';\r\n\r\nconst MarketPricePredictionInputSchema = z.object({\r\n  commodity: z.string().describe('A description from the user about the commodity they want a price prediction for. This could be a simple name like \"Paddy\" or a more descriptive sentence like \"I want to know the price for high-quality wheat in Punjab\".'),\r\n});\r\nexport type MarketPricePredictionInput = z.infer<typeof MarketPricePredictionInputSchema>;\r\n\r\nconst WeeklyForecastSchema = z.object({\r\n  week: z.string().describe('The week of the forecast (e.g., \"Week 1\", \"Week 2\").'),\r\n  price: z.number().describe('The predicted modal price for that week.'),\r\n});\r\n\r\nconst MarketPricePredictionOutputSchema = z.object({\r\n  analysis: z.string().describe('A detailed analysis of the price trend based on historical data.'),\r\n  weeklyForecast: z.array(WeeklyForecastSchema).describe('A 4-week price forecast for the commodity.'),\r\n  suggestion: z.string().describe('An actionable suggestion for the user based on the forecast (e.g., whether to sell or hold).'),\r\n});\r\nexport type MarketPricePredictionOutput = z.infer<typeof MarketPricePredictionOutputSchema>;\r\n\r\n\r\nexport async function predictMarketPrice(\r\n  input: MarketPricePredictionInput\r\n): Promise<MarketPricePredictionOutput> {\r\n  return predictMarketPriceFlow(input);\r\n}\r\n\r\n\r\nconst predictMarketPricePrompt = ai.definePrompt({\r\n  name: 'predictMarketPricePrompt',\r\n  input: {schema: z.object({\r\n    commodity: z.string(),\r\n    marketData: z.string(),\r\n  })},\r\n  output: { format: 'text' }, // Ask for simple text output\r\n  prompt: `You are an expert market analyst specializing in Indian agricultural commodities.\r\n  \r\nYou have been provided with a JSON dataset of recent market prices for a specific commodity. Your task is to analyze this historical data, predict the future price trend for the next 4 weeks, and provide a suggestion to the farmer.\r\n\r\nCommodity to Analyze: {{{commodity}}}\r\n\r\nHistorical Market Data (JSON):\r\n\\`\\`\\`json\r\n{{{marketData}}}\r\n\\`\\`\\`\r\n\r\n1.  **Analysis**: Analyze the provided data to identify price trends, volatility, and any recurring patterns. Consider the 'arrival_date', 'min_price', 'max_price', and 'modal_price'. Write a brief report summarizing your findings.\r\n2.  **4-Week Price Forecast**: Based on your analysis, provide a week-by-week predicted modal price for the commodity for the upcoming four weeks. The price should be a single number (e.g., 1500), not a range.\r\n3.  **Suggestion**: Based on your forecast, provide a short, actionable suggestion to the farmer (e.g., \"Prices are trending up, consider holding your stock for a couple of weeks for a better return.\" or \"Market seems stable, selling now would be a safe choice.\").\r\n\r\nRespond in a clear, narrative format. Do not use JSON.`,\r\n});\r\n\r\nconst jsonOutputFormatterPrompt = ai.definePrompt({\r\n    name: 'jsonOutputFormatterPrompt',\r\n    input: { schema: z.object({ text: z.string() }) },\r\n    output: { schema: MarketPricePredictionOutputSchema },\r\n    prompt: `Convert the following text into a structured JSON object.\r\n\r\nThe JSON object must have three keys: 'analysis', 'weeklyForecast', and 'suggestion'.\r\n- 'analysis' should be a string containing the market analysis.\r\n- 'weeklyForecast' should be an array of objects. Each object must have a 'week' (string) and a 'price' (number).\r\n- 'suggestion' should be a string containing the actionable suggestion.\r\n\r\nExample JSON output:\r\n{\r\n  \"analysis\": \"The analysis of the market...\",\r\n  \"weeklyForecast\": [\r\n    { \"week\": \"Week 1\", \"price\": 1500 },\r\n    { \"week\": \"Week 2\", \"price\": 1550 },\r\n    { \"week\": \"Week 3\", \"price\": 1520 },\r\n    { \"week\": \"Week 4\", \"price\": 1580 }\r\n  ],\r\n  \"suggestion\": \"It is a good time to sell.\"\r\n}\r\n\r\nText to convert:\r\n---\r\n{{{text}}}\r\n---\r\n`,\r\n});\r\n\r\n\r\nconst commodityIdentifierPrompt = ai.definePrompt({\r\n    name: 'commodityIdentifierPrompt',\r\n    input: { schema: z.object({\r\n        description: z.string(),\r\n        commoditiesList: z.array(z.string()),\r\n    })},\r\n    output: { schema: z.object({ commodity: z.string() }) },\r\n    prompt: `From the user's description, identify the single most likely commodity they are asking about.\r\nThe commodity MUST be one of the items from the provided list.\r\n    \r\nUser Description: \"{{{description}}}\"\r\n\r\nHere is a list of available commodities from the market data. Find the best match:\r\n{{#each commoditiesList}}\r\n- {{{this}}}\r\n{{/each}}\r\n    \r\nRespond with only the name of the most relevant commodity from the list. If you cannot find a clear match, respond with \"Unknown\".`,\r\n});\r\n\r\nconst predictMarketPriceFlow = ai.defineFlow(\r\n  {\r\n    name: 'predictMarketPriceFlow',\r\n    inputSchema: MarketPricePredictionInputSchema,\r\n    outputSchema: MarketPricePredictionOutputSchema,\r\n  },\r\n  async ({ commodity: description }) => {\r\n    const allData = await getAllMarketData();\r\n    const uniqueCommodities = [...new Set(allData.map(item => item.commodity).filter(c => c) as string[])];\r\n\r\n    const { output: identifiedCommodity } = await commodityIdentifierPrompt({\r\n        description,\r\n        commoditiesList: uniqueCommodities,\r\n    });\r\n\r\n    if (!identifiedCommodity || !identifiedCommodity.commodity || identifiedCommodity.commodity === 'Unknown') {\r\n        throw new Error(`Could not identify a valid commodity from the description: \"${description}\"`);\r\n    }\r\n    \r\n    const commodityToAnalyze = identifiedCommodity.commodity;\r\n\r\n    const commodityData = allData.filter(item => item.commodity && item.commodity.toLowerCase() === commodityToAnalyze.toLowerCase());\r\n\r\n    if (commodityData.length === 0) {\r\n      throw new Error(`No market data found for commodity: ${commodityToAnalyze}. It might be a rare commodity or the data is not available in the recent records.`);\r\n    }\r\n    \r\n    const dataSample = commodityData.slice(0, 100);\r\n\r\n    // Step 1: Get the analysis as plain text.\r\n    const { text } = await predictMarketPricePrompt({\r\n        commodity: commodityToAnalyze,\r\n        marketData: JSON.stringify(dataSample, null, 2),\r\n    });\r\n\r\n    // Step 2: Convert the text to structured JSON.\r\n    const { output: structuredOutput } = await jsonOutputFormatterPrompt({ text });\r\n    \r\n    return structuredOutput!;\r\n  }\r\n);\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 570, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/.next-internal/server/app/market-analyser/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {translateText as '402578704a0068c0448430b72144adf3acc23f7769'} from 'ACTIONS_MODULE0'\nexport {predictMarketPrice as '4032c2dc743780b6f814d417b776f5c71c57808a11'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 622, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/app/market-analyser/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/market-analyser/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/market-analyser/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoS,GACjU,kEACA","debugId":null}},
    {"offset": {"line": 636, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/app/market-analyser/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/market-analyser/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/market-analyser/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgR,GAC7S,8CACA","debugId":null}},
    {"offset": {"line": 650, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}