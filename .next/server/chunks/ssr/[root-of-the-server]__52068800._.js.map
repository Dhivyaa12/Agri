{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\r\nimport {googleAI} from '@genkit-ai/googleai';\r\n\r\nexport const ai = genkit({\r\n  plugins: [googleAI()],\r\n  model: 'googleai/gemini-2.0-flash',\r\n});\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/ai/flows/translate-text.ts"],"sourcesContent":["\r\n'use server';\r\n\r\n/**\r\n * @fileOverview A text translation flow using Genkit and Google AI.\r\n * \r\n * - translateText - Translates text to a specified target language.\r\n * - TranslateTextInput - The input type for the translateText function.\r\n * - TranslateTextOutput - The return type for the translateText function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\n\r\nconst TranslateTextInputSchema = z.object({\r\n  text: z.string().describe('The text to be translated. This may contain multiple lines separated by \"\\\\n---\\\\n\".'),\r\n  targetLanguage: z.string().describe('The target language for translation (e.g., \"hi\", \"ta\").'),\r\n});\r\nexport type TranslateTextInput = z.infer<typeof TranslateTextInputSchema>;\r\n\r\nconst TranslateTextOutputSchema = z.object({\r\n  translatedText: z.string().describe('The translated text, preserving the \"\\\\n---\\\\n\" separators.'),\r\n});\r\nexport type TranslateTextOutput = z.infer<typeof TranslateTextOutputSchema>;\r\n\r\nexport async function translateText(input: TranslateTextInput): Promise<TranslateTextOutput> {\r\n  return translateTextFlow(input);\r\n}\r\n\r\nconst translateTextFlow = ai.defineFlow(\r\n  {\r\n    name: 'translateTextFlow',\r\n    inputSchema: TranslateTextInputSchema,\r\n    outputSchema: TranslateTextOutputSchema,\r\n  },\r\n  async ({ text, targetLanguage }) => {\r\n    // Handle cases where the text might be empty or just separators\r\n    if (!text.trim() || text.trim() === '---') {\r\n      return { translatedText: text };\r\n    }\r\n\r\n    const { text: translatedText } = await ai.generate({\r\n      model: 'googleai/gemini-2.0-flash',\r\n      prompt: `Translate the following text to the language with code '${targetLanguage}'. The text may contain multiple distinct entries separated by \"\\\\n---\\\\n\". Maintain this separator in your output. Return only the translated text, preserving the separators exactly as they appear in the input.\\n\\nText to translate: \"${text}\"`,\r\n    });\r\n    \r\n    return {\r\n      translatedText,\r\n    };\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;AAGA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACtC;AAGA,MAAM,4BAA4B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACtC;AAGO,eAAe,cAAc,KAAyB;IAC3D,OAAO,kBAAkB;AAC3B;AAEA,MAAM,oBAAoB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACrC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO,EAAE,IAAI,EAAE,cAAc,EAAE;IAC7B,gEAAgE;IAChE,IAAI,CAAC,KAAK,IAAI,MAAM,KAAK,IAAI,OAAO,OAAO;QACzC,OAAO;YAAE,gBAAgB;QAAK;IAChC;IAEA,MAAM,EAAE,MAAM,cAAc,EAAE,GAAG,MAAM,mHAAA,CAAA,KAAE,CAAC,QAAQ,CAAC;QACjD,OAAO;QACP,QAAQ,CAAC,wDAAwD,EAAE,eAAe,2OAA2O,EAAE,KAAK,CAAC,CAAC;IACxU;IAEA,OAAO;QACL;IACF;AACF;;;IAxBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 295, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/ai/flows/government-scheme-recommendation.ts"],"sourcesContent":["\r\n'use server';\r\n/**\r\n * @fileOverview A government scheme recommendation AI agent.\r\n *\r\n * - recommendGovSchemes - A function that handles the scheme recommendation process.\r\n * - RecommendGovSchemesInput - The input type for the recommendGovSchemes function.\r\n * - RecommendGovSchemesOutput - The return type for the recommendGovSchemes function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\n\r\nconst SchemeSchema = z.object({\r\n    name: z.string().describe('The full name of the government scheme.'),\r\n    url: z.string().describe('The official government URL for the scheme.'),\r\n});\r\n\r\nconst RecommendGovSchemesInputSchema = z.object({\r\n  state: z.string().describe('The state for which to find government schemes.'),\r\n  requirements: z\r\n    .string()\r\n    .optional()\r\n    .describe(\r\n      'The requirements of the user, such as women-focused schemes or irrigation support. If not provided, general schemes should be recommended.'\r\n    ),\r\n});\r\nexport type RecommendGovSchemesInput = z.infer<typeof RecommendGovSchemesInputSchema>;\r\n\r\nconst RecommendGovSchemesOutputSchema = z.object({\r\n  centralSchemes: z.array(SchemeSchema).describe('Relevant Central Government Schemes with their names and URLs.'),\r\n  stateSchemes: z.array(SchemeSchema).describe('Applicable State Government Schemes with their names and URLs.'),\r\n  womenSchemes: z\r\n    .array(SchemeSchema)\r\n    .describe('Women-specific agricultural schemes with their names and URLs.'),\r\n});\r\nexport type RecommendGovSchemesOutput = z.infer<typeof RecommendGovSchemesOutputSchema>;\r\n\r\nexport async function recommendGovSchemes(\r\n  input: RecommendGovSchemesInput\r\n): Promise<RecommendGovSchemesOutput> {\r\n  return recommendGovSchemesFlow(input);\r\n}\r\n\r\nconst prompt = ai.definePrompt({\r\n  name: 'recommendGovSchemesPrompt',\r\n  input: {schema: RecommendGovSchemesInputSchema},\r\n  output: {schema: RecommendGovSchemesOutputSchema},\r\n  prompt: `You are an expert in Indian government agricultural schemes.\r\n\r\nYou will use the state and requirements provided to recommend relevant schemes. For each scheme, you MUST provide the official government website URL.\r\n\r\nState: {{{state}}}\r\n{{#if requirements}}\r\nRequirements: {{{requirements}}}\r\n{{/if}}\r\n\r\nRecommend relevant Central Government Schemes, applicable State Government Schemes, and Women-specific agricultural schemes. If no specific requirements are given, provide a list of general, popular, and impactful schemes for the given state.\r\n\r\nFormat your output as a JSON object with keys for centralSchemes, stateSchemes, and womenSchemes. Each key should contain an array of objects, with each object having a 'name' and 'url' for the scheme.`,\r\n});\r\n\r\nconst recommendGovSchemesFlow = ai.defineFlow(\r\n  {\r\n    name: 'recommendGovSchemesFlow',\r\n    inputSchema: RecommendGovSchemesInputSchema,\r\n    outputSchema: RecommendGovSchemesOutputSchema,\r\n  },\r\n  async input => {\r\n    const {output} = await prompt(input);\r\n    return output!;\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1B,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,KAAK,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC7B;AAEA,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,GACR,QAAQ,CACP;AAEN;AAGA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,gBAAgB,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,cAAc,QAAQ,CAAC;IAC/C,cAAc,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,cAAc,QAAQ,CAAC;IAC7C,cAAc,uIAAA,CAAA,IAAC,CACZ,KAAK,CAAC,cACN,QAAQ,CAAC;AACd;AAGO,eAAe,oBACpB,KAA+B;IAE/B,OAAO,wBAAwB;AACjC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA8B;IAC9C,QAAQ;QAAC,QAAQ;IAA+B;IAChD,QAAQ,CAAC;;;;;;;;;;;yMAW8L,CAAC;AAC1M;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC3C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAjCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 370, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/ai/flows/speech-to-text.ts"],"sourcesContent":["'use server';\r\n\r\n/**\r\n * @fileOverview A speech-to-text (STT) flow using Genkit and Google AI.\r\n *\r\n * - speechToText - Converts speech audio into text.\r\n * - SpeechToTextInput - The input type for the speechToText function.\r\n * - SpeechToTextOutput - The return type for the speechToText function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\n\r\nconst SpeechToTextInputSchema = z.object({\r\n  audioDataUri: z\r\n    .string()\r\n    .describe(\r\n      \"The speech audio as a data URI. Expected format: 'data:audio/wav;base64,<encoded_data>'.\"\r\n    ),\r\n  language: z.string().optional().describe('The BCP-47 language code for transcription (e.g., \"en-US\", \"hi-IN\").'),\r\n});\r\nexport type SpeechToTextInput = z.infer<typeof SpeechToTextInputSchema>;\r\n\r\nconst SpeechToTextOutputSchema = z.object({\r\n  text: z.string().describe('The transcribed text.'),\r\n});\r\nexport type SpeechToTextOutput = z.infer<typeof SpeechToTextOutputSchema>;\r\n\r\nexport async function speechToText(input: SpeechToTextInput): Promise<SpeechToTextOutput> {\r\n  return speechToTextFlow(input);\r\n}\r\n\r\nconst speechToTextFlow = ai.defineFlow(\r\n  {\r\n    name: 'speechToTextFlow',\r\n    inputSchema: SpeechToTextInputSchema,\r\n    outputSchema: SpeechToTextOutputSchema,\r\n  },\r\n  async ({ audioDataUri, language }) => {\r\n    const languagePrompt = language ? ` The user is speaking in ${language}. Transcribe it accurately in that language.` : '';\r\n    \r\n    const { text } = await ai.generate({\r\n      model: 'googleai/gemini-2.0-flash',\r\n      prompt: [{ media: { url: audioDataUri } }, {text: `Transcribe the following audio accurately. The audio contains a description of crop symptoms for agricultural diagnosis.${languagePrompt}`}],\r\n    });\r\n\r\n    return {\r\n      text,\r\n    };\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,0BAA0B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACvC,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,CACP;IAEJ,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,GAAG,QAAQ,CAAC;AAC3C;AAGA,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC5B;AAGO,eAAe,aAAa,KAAwB;IACzD,OAAO,iBAAiB;AAC1B;AAEA,MAAM,mBAAmB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACpC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO,EAAE,YAAY,EAAE,QAAQ,EAAE;IAC/B,MAAM,iBAAiB,WAAW,CAAC,yBAAyB,EAAE,SAAS,4CAA4C,CAAC,GAAG;IAEvH,MAAM,EAAE,IAAI,EAAE,GAAG,MAAM,mHAAA,CAAA,KAAE,CAAC,QAAQ,CAAC;QACjC,OAAO;QACP,QAAQ;YAAC;gBAAE,OAAO;oBAAE,KAAK;gBAAa;YAAE;YAAG;gBAAC,MAAM,CAAC,wHAAwH,EAAE,gBAAgB;YAAA;SAAE;IACjM;IAEA,OAAO;QACL;IACF;AACF;;;IArBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 433, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/.next-internal/server/app/government-schemes/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {translateText as '402578704a0068c0448430b72144adf3acc23f7769'} from 'ACTIONS_MODULE0'\nexport {recommendGovSchemes as '403e3f83ec63b15020e5d99d349365356a72cf486d'} from 'ACTIONS_MODULE1'\nexport {speechToText as '4032f1b03923a55598788ff50d25ed88cf179615f1'} from 'ACTIONS_MODULE2'\n"],"names":[],"mappings":";AAAA;AACA;AACA","debugId":null}},
    {"offset": {"line": 491, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/app/government-schemes/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/government-schemes/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/government-schemes/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAuS,GACpU,qEACA","debugId":null}},
    {"offset": {"line": 505, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/app/government-schemes/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/government-schemes/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/government-schemes/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAmR,GAChT,iDACA","debugId":null}},
    {"offset": {"line": 519, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}