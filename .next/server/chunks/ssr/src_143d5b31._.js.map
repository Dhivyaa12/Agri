{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 7, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/components/page-header.tsx"],"sourcesContent":["\r\n'use client';\r\nimport { cn } from \"@/lib/utils\";\r\nimport { Button } from \"./ui/button\";\r\nimport { ArrowLeft } from \"lucide-react\";\r\nimport { useRouter } from \"next/navigation\";\r\n\r\nfunction PageHeader({\r\n  className,\r\n  children,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLDivElement>) {\r\n    const router = useRouter();\r\n  return (\r\n    <section\r\n      className={cn(\r\n        \"flex max-w-full flex-col gap-2\",\r\n        className\r\n      )}\r\n      {...props}\r\n    >\r\n        <div className=\"flex items-center gap-4\">\r\n            <Button\r\n                variant=\"outline\"\r\n                size=\"icon\"\r\n                className=\"h-8 w-8 shrink-0\"\r\n                onClick={() => router.back()}\r\n            >\r\n                <ArrowLeft className=\"h-4 w-4\" />\r\n                <span className=\"sr-only\">Back</span>\r\n            </Button>\r\n            <div className=\"flex-1\">{children}</div>\r\n        </div>\r\n    </section>\r\n  );\r\n}\r\n\r\nfunction PageHeaderHeading({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLHeadingElement>) {\r\n  return (\r\n    <h1\r\n      className={cn(\r\n        \"text-3xl font-bold leading-tight tracking-tighter md:text-4xl lg:leading-[1.1]\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nfunction PageHeaderDescription({\r\n  className,\r\n  ...props\r\n}: React.HTMLAttributes<HTMLParagraphElement>) {\r\n  return (\r\n    <p\r\n      className={cn(\r\n        \"max-w-prose text-balance text-muted-foreground sm:text-lg\",\r\n        className\r\n      )}\r\n      {...props}\r\n    />\r\n  );\r\n}\r\n\r\nexport { PageHeader, PageHeaderHeading, PageHeaderDescription };\r\n"],"names":[],"mappings":";;;;;;AAEA;AACA;AACA;AACA;AAJA;;;;;;AAMA,SAAS,WAAW,EAClB,SAAS,EACT,QAAQ,EACR,GAAG,OACkC;IACnC,MAAM,SAAS,CAAA,GAAA,kIAAA,CAAA,YAAS,AAAD;IACzB,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,kCACA;QAED,GAAG,KAAK;kBAEP,cAAA,8OAAC;YAAI,WAAU;;8BACX,8OAAC,kIAAA,CAAA,SAAM;oBACH,SAAQ;oBACR,MAAK;oBACL,WAAU;oBACV,SAAS,IAAM,OAAO,IAAI;;sCAE1B,8OAAC,gNAAA,CAAA,YAAS;4BAAC,WAAU;;;;;;sCACrB,8OAAC;4BAAK,WAAU;sCAAU;;;;;;;;;;;;8BAE9B,8OAAC;oBAAI,WAAU;8BAAU;;;;;;;;;;;;;;;;;AAIrC;AAEA,SAAS,kBAAkB,EACzB,SAAS,EACT,GAAG,OACsC;IACzC,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,kFACA;QAED,GAAG,KAAK;;;;;;AAGf;AAEA,SAAS,sBAAsB,EAC7B,SAAS,EACT,GAAG,OACwC;IAC3C,qBACE,8OAAC;QACC,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,6DACA;QAED,GAAG,KAAK;;;;;;AAGf","debugId":null}},
    {"offset": {"line": 105, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/components/ui/card.tsx"],"sourcesContent":["import * as React from \"react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Card = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\r\n      \"rounded-lg border bg-card text-card-foreground shadow-sm\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nCard.displayName = \"Card\"\r\n\r\nconst CardHeader = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"flex flex-col space-y-1.5 p-6\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardHeader.displayName = \"CardHeader\"\r\n\r\nconst CardTitle = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\r\n      \"text-2xl font-semibold leading-none tracking-tight\",\r\n      className\r\n    )}\r\n    {...props}\r\n  />\r\n))\r\nCardTitle.displayName = \"CardTitle\"\r\n\r\nconst CardDescription = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"text-sm text-muted-foreground\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardDescription.displayName = \"CardDescription\"\r\n\r\nconst CardContent = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div ref={ref} className={cn(\"p-6 pt-0\", className)} {...props} />\r\n))\r\nCardContent.displayName = \"CardContent\"\r\n\r\nconst CardFooter = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => (\r\n  <div\r\n    ref={ref}\r\n    className={cn(\"flex items-center p-6 pt-0\", className)}\r\n    {...props}\r\n  />\r\n))\r\nCardFooter.displayName = \"CardFooter\"\r\n\r\nexport { Card, CardHeader, CardFooter, CardTitle, CardDescription, CardContent }\r\n"],"names":[],"mappings":";;;;;;;;;AAAA;AAEA;;;;AAEA,MAAM,qBAAO,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,4DACA;QAED,GAAG,KAAK;;;;;;AAGb,KAAK,WAAW,GAAG;AAEnB,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG;AAEzB,MAAM,0BAAY,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG/B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,sDACA;QAED,GAAG,KAAK;;;;;;AAGb,UAAU,WAAW,GAAG;AAExB,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iCAAiC;QAC9C,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG;AAE9B,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QAAI,KAAK;QAAK,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,YAAY;QAAa,GAAG,KAAK;;;;;;AAEhE,YAAY,WAAW,GAAG;AAE1B,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC;QACC,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,8BAA8B;QAC3C,GAAG,KAAK;;;;;;AAGb,WAAW,WAAW,GAAG","debugId":null}},
    {"offset": {"line": 186, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/components/ui/label.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\r\nimport { cva, type VariantProps } from \"class-variance-authority\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst labelVariants = cva(\r\n  \"text-sm font-medium leading-none peer-disabled:cursor-not-allowed peer-disabled:opacity-70\"\r\n)\r\n\r\nconst Label = React.forwardRef<\r\n  React.ElementRef<typeof LabelPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root> &\r\n    VariantProps<typeof labelVariants>\r\n>(({ className, ...props }, ref) => (\r\n  <LabelPrimitive.Root\r\n    ref={ref}\r\n    className={cn(labelVariants(), className)}\r\n    {...props}\r\n  />\r\n))\r\nLabel.displayName = LabelPrimitive.Root.displayName\r\n\r\nexport { Label }\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAEA;AANA;;;;;;AAQA,MAAM,gBAAgB,CAAA,GAAA,gKAAA,CAAA,MAAG,AAAD,EACtB;AAGF,MAAM,sBAAQ,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAI3B,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,iKAAA,CAAA,OAAmB;QAClB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,iBAAiB;QAC9B,GAAG,KAAK;;;;;;AAGb,MAAM,WAAW,GAAG,iKAAA,CAAA,OAAmB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 218, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/components/ui/form.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as LabelPrimitive from \"@radix-ui/react-label\"\r\nimport { Slot } from \"@radix-ui/react-slot\"\r\nimport {\r\n  Controller,\r\n  FormProvider,\r\n  useFormContext,\r\n  type ControllerProps,\r\n  type FieldPath,\r\n  type FieldValues,\r\n} from \"react-hook-form\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\nimport { Label } from \"@/components/ui/label\"\r\n\r\nconst Form = FormProvider\r\n\r\ntype FormFieldContextValue<\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n> = {\r\n  name: TName\r\n}\r\n\r\nconst FormFieldContext = React.createContext<FormFieldContextValue>(\r\n  {} as FormFieldContextValue\r\n)\r\n\r\nconst FormField = <\r\n  TFieldValues extends FieldValues = FieldValues,\r\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>\r\n>({\r\n  ...props\r\n}: ControllerProps<TFieldValues, TName>) => {\r\n  return (\r\n    <FormFieldContext.Provider value={{ name: props.name }}>\r\n      <Controller {...props} />\r\n    </FormFieldContext.Provider>\r\n  )\r\n}\r\n\r\nconst useFormField = () => {\r\n  const fieldContext = React.useContext(FormFieldContext)\r\n  const itemContext = React.useContext(FormItemContext)\r\n  const { getFieldState, formState } = useFormContext()\r\n\r\n  const fieldState = getFieldState(fieldContext.name, formState)\r\n\r\n  if (!fieldContext) {\r\n    throw new Error(\"useFormField should be used within <FormField>\")\r\n  }\r\n\r\n  const { id } = itemContext\r\n\r\n  return {\r\n    id,\r\n    name: fieldContext.name,\r\n    formItemId: `${id}-form-item`,\r\n    formDescriptionId: `${id}-form-item-description`,\r\n    formMessageId: `${id}-form-item-message`,\r\n    ...fieldState,\r\n  }\r\n}\r\n\r\ntype FormItemContextValue = {\r\n  id: string\r\n}\r\n\r\nconst FormItemContext = React.createContext<FormItemContextValue>(\r\n  {} as FormItemContextValue\r\n)\r\n\r\nconst FormItem = React.forwardRef<\r\n  HTMLDivElement,\r\n  React.HTMLAttributes<HTMLDivElement>\r\n>(({ className, ...props }, ref) => {\r\n  const id = React.useId()\r\n\r\n  return (\r\n    <FormItemContext.Provider value={{ id }}>\r\n      <div ref={ref} className={cn(\"space-y-2\", className)} {...props} />\r\n    </FormItemContext.Provider>\r\n  )\r\n})\r\nFormItem.displayName = \"FormItem\"\r\n\r\nconst FormLabel = React.forwardRef<\r\n  React.ElementRef<typeof LabelPrimitive.Root>,\r\n  React.ComponentPropsWithoutRef<typeof LabelPrimitive.Root>\r\n>(({ className, ...props }, ref) => {\r\n  const { error, formItemId } = useFormField()\r\n\r\n  return (\r\n    <Label\r\n      ref={ref}\r\n      className={cn(error && \"text-destructive\", className)}\r\n      htmlFor={formItemId}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nFormLabel.displayName = \"FormLabel\"\r\n\r\nconst FormControl = React.forwardRef<\r\n  React.ElementRef<typeof Slot>,\r\n  React.ComponentPropsWithoutRef<typeof Slot>\r\n>(({ ...props }, ref) => {\r\n  const { error, formItemId, formDescriptionId, formMessageId } = useFormField()\r\n\r\n  return (\r\n    <Slot\r\n      ref={ref}\r\n      id={formItemId}\r\n      aria-describedby={\r\n        !error\r\n          ? `${formDescriptionId}`\r\n          : `${formDescriptionId} ${formMessageId}`\r\n      }\r\n      aria-invalid={!!error}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nFormControl.displayName = \"FormControl\"\r\n\r\nconst FormDescription = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, ...props }, ref) => {\r\n  const { formDescriptionId } = useFormField()\r\n\r\n  return (\r\n    <p\r\n      ref={ref}\r\n      id={formDescriptionId}\r\n      className={cn(\"text-sm text-muted-foreground\", className)}\r\n      {...props}\r\n    />\r\n  )\r\n})\r\nFormDescription.displayName = \"FormDescription\"\r\n\r\nconst FormMessage = React.forwardRef<\r\n  HTMLParagraphElement,\r\n  React.HTMLAttributes<HTMLParagraphElement>\r\n>(({ className, children, ...props }, ref) => {\r\n  const { error, formMessageId } = useFormField()\r\n  const body = error ? String(error?.message ?? \"\") : children\r\n\r\n  if (!body) {\r\n    return null\r\n  }\r\n\r\n  return (\r\n    <p\r\n      ref={ref}\r\n      id={formMessageId}\r\n      className={cn(\"text-sm font-medium text-destructive\", className)}\r\n      {...props}\r\n    >\r\n      {body}\r\n    </p>\r\n  )\r\n})\r\nFormMessage.displayName = \"FormMessage\"\r\n\r\nexport {\r\n  useFormField,\r\n  Form,\r\n  FormItem,\r\n  FormLabel,\r\n  FormControl,\r\n  FormDescription,\r\n  FormMessage,\r\n  FormField,\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 371, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/components/ui/select.tsx"],"sourcesContent":["\"use client\"\r\n\r\nimport * as React from \"react\"\r\nimport * as SelectPrimitive from \"@radix-ui/react-select\"\r\nimport { Check, ChevronDown, ChevronUp } from \"lucide-react\"\r\n\r\nimport { cn } from \"@/lib/utils\"\r\n\r\nconst Select = SelectPrimitive.Root\r\n\r\nconst SelectGroup = SelectPrimitive.Group\r\n\r\nconst SelectValue = SelectPrimitive.Value\r\n\r\nconst SelectTrigger = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Trigger>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Trigger>\r\n>(({ className, children, ...props }, ref) => (\r\n  <SelectPrimitive.Trigger\r\n    ref={ref}\r\n    className={cn(\r\n      \"flex h-10 w-full items-center justify-between rounded-md border border-input bg-background px-3 py-2 text-sm ring-offset-background placeholder:text-muted-foreground focus:outline-none focus:ring-2 focus:ring-ring focus:ring-offset-2 disabled:cursor-not-allowed disabled:opacity-50 [&>span]:line-clamp-1\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    {children}\r\n    <SelectPrimitive.Icon asChild>\r\n      <ChevronDown className=\"h-4 w-4 opacity-50\" />\r\n    </SelectPrimitive.Icon>\r\n  </SelectPrimitive.Trigger>\r\n))\r\nSelectTrigger.displayName = SelectPrimitive.Trigger.displayName\r\n\r\nconst SelectScrollUpButton = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.ScrollUpButton>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollUpButton>\r\n>(({ className, ...props }, ref) => (\r\n  <SelectPrimitive.ScrollUpButton\r\n    ref={ref}\r\n    className={cn(\r\n      \"flex cursor-default items-center justify-center py-1\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    <ChevronUp className=\"h-4 w-4\" />\r\n  </SelectPrimitive.ScrollUpButton>\r\n))\r\nSelectScrollUpButton.displayName = SelectPrimitive.ScrollUpButton.displayName\r\n\r\nconst SelectScrollDownButton = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.ScrollDownButton>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.ScrollDownButton>\r\n>(({ className, ...props }, ref) => (\r\n  <SelectPrimitive.ScrollDownButton\r\n    ref={ref}\r\n    className={cn(\r\n      \"flex cursor-default items-center justify-center py-1\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    <ChevronDown className=\"h-4 w-4\" />\r\n  </SelectPrimitive.ScrollDownButton>\r\n))\r\nSelectScrollDownButton.displayName =\r\n  SelectPrimitive.ScrollDownButton.displayName\r\n\r\nconst SelectContent = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Content>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Content>\r\n>(({ className, children, position = \"popper\", ...props }, ref) => (\r\n  <SelectPrimitive.Portal>\r\n    <SelectPrimitive.Content\r\n      ref={ref}\r\n      className={cn(\r\n        \"relative z-50 max-h-96 min-w-[8rem] overflow-hidden rounded-md border bg-popover text-popover-foreground shadow-md data-[state=open]:animate-in data-[state=closed]:animate-out data-[state=closed]:fade-out-0 data-[state=open]:fade-in-0 data-[state=closed]:zoom-out-95 data-[state=open]:zoom-in-95 data-[side=bottom]:slide-in-from-top-2 data-[side=left]:slide-in-from-right-2 data-[side=right]:slide-in-from-left-2 data-[side=top]:slide-in-from-bottom-2\",\r\n        position === \"popper\" &&\r\n          \"data-[side=bottom]:translate-y-1 data-[side=left]:-translate-x-1 data-[side=right]:translate-x-1 data-[side=top]:-translate-y-1\",\r\n        className\r\n      )}\r\n      position={position}\r\n      {...props}\r\n    >\r\n      <SelectScrollUpButton />\r\n      <SelectPrimitive.Viewport\r\n        className={cn(\r\n          \"p-1\",\r\n          position === \"popper\" &&\r\n            \"h-[var(--radix-select-trigger-height)] w-full min-w-[var(--radix-select-trigger-width)]\"\r\n        )}\r\n      >\r\n        {children}\r\n      </SelectPrimitive.Viewport>\r\n      <SelectScrollDownButton />\r\n    </SelectPrimitive.Content>\r\n  </SelectPrimitive.Portal>\r\n))\r\nSelectContent.displayName = SelectPrimitive.Content.displayName\r\n\r\nconst SelectLabel = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Label>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Label>\r\n>(({ className, ...props }, ref) => (\r\n  <SelectPrimitive.Label\r\n    ref={ref}\r\n    className={cn(\"py-1.5 pl-8 pr-2 text-sm font-semibold\", className)}\r\n    {...props}\r\n  />\r\n))\r\nSelectLabel.displayName = SelectPrimitive.Label.displayName\r\n\r\nconst SelectItem = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Item>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Item>\r\n>(({ className, children, ...props }, ref) => (\r\n  <SelectPrimitive.Item\r\n    ref={ref}\r\n    className={cn(\r\n      \"relative flex w-full cursor-default select-none items-center rounded-sm py-1.5 pl-8 pr-2 text-sm outline-none focus:bg-accent focus:text-accent-foreground data-[disabled]:pointer-events-none data-[disabled]:opacity-50\",\r\n      className\r\n    )}\r\n    {...props}\r\n  >\r\n    <span className=\"absolute left-2 flex h-3.5 w-3.5 items-center justify-center\">\r\n      <SelectPrimitive.ItemIndicator>\r\n        <Check className=\"h-4 w-4\" />\r\n      </SelectPrimitive.ItemIndicator>\r\n    </span>\r\n\r\n    <SelectPrimitive.ItemText>{children}</SelectPrimitive.ItemText>\r\n  </SelectPrimitive.Item>\r\n))\r\nSelectItem.displayName = SelectPrimitive.Item.displayName\r\n\r\nconst SelectSeparator = React.forwardRef<\r\n  React.ElementRef<typeof SelectPrimitive.Separator>,\r\n  React.ComponentPropsWithoutRef<typeof SelectPrimitive.Separator>\r\n>(({ className, ...props }, ref) => (\r\n  <SelectPrimitive.Separator\r\n    ref={ref}\r\n    className={cn(\"-mx-1 my-1 h-px bg-muted\", className)}\r\n    {...props}\r\n  />\r\n))\r\nSelectSeparator.displayName = SelectPrimitive.Separator.displayName\r\n\r\nexport {\r\n  Select,\r\n  SelectGroup,\r\n  SelectValue,\r\n  SelectTrigger,\r\n  SelectContent,\r\n  SelectLabel,\r\n  SelectItem,\r\n  SelectSeparator,\r\n  SelectScrollUpButton,\r\n  SelectScrollDownButton,\r\n}\r\n"],"names":[],"mappings":";;;;;;;;;;;;;AAEA;AACA;AACA;AAAA;AAAA;AAEA;AANA;;;;;;AAQA,MAAM,SAAS,kKAAA,CAAA,OAAoB;AAEnC,MAAM,cAAc,kKAAA,CAAA,QAAqB;AAEzC,MAAM,cAAc,kKAAA,CAAA,QAAqB;AAEzC,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC,kKAAA,CAAA,UAAuB;QACtB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,mTACA;QAED,GAAG,KAAK;;YAER;0BACD,8OAAC,kKAAA,CAAA,OAAoB;gBAAC,OAAO;0BAC3B,cAAA,8OAAC,oNAAA,CAAA,cAAW;oBAAC,WAAU;;;;;;;;;;;;;;;;;AAI7B,cAAc,WAAW,GAAG,kKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,qCAAuB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG1C,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,iBAA8B;QAC7B,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,wDACA;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,gNAAA,CAAA,YAAS;YAAC,WAAU;;;;;;;;;;;AAGzB,qBAAqB,WAAW,GAAG,kKAAA,CAAA,iBAA8B,CAAC,WAAW;AAE7E,MAAM,uCAAyB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAG5C,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,mBAAgC;QAC/B,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,wDACA;QAED,GAAG,KAAK;kBAET,cAAA,8OAAC,oNAAA,CAAA,cAAW;YAAC,WAAU;;;;;;;;;;;AAG3B,uBAAuB,WAAW,GAChC,kKAAA,CAAA,mBAAgC,CAAC,WAAW;AAE9C,MAAM,8BAAgB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGnC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,WAAW,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACzD,8OAAC,kKAAA,CAAA,SAAsB;kBACrB,cAAA,8OAAC,kKAAA,CAAA,UAAuB;YACtB,KAAK;YACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,ucACA,aAAa,YACX,mIACF;YAEF,UAAU;YACT,GAAG,KAAK;;8BAET,8OAAC;;;;;8BACD,8OAAC,kKAAA,CAAA,WAAwB;oBACvB,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,OACA,aAAa,YACX;8BAGH;;;;;;8BAEH,8OAAC;;;;;;;;;;;;;;;;AAIP,cAAc,WAAW,GAAG,kKAAA,CAAA,UAAuB,CAAC,WAAW;AAE/D,MAAM,4BAAc,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGjC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,QAAqB;QACpB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,0CAA0C;QACvD,GAAG,KAAK;;;;;;AAGb,YAAY,WAAW,GAAG,kKAAA,CAAA,QAAqB,CAAC,WAAW;AAE3D,MAAM,2BAAa,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGhC,CAAC,EAAE,SAAS,EAAE,QAAQ,EAAE,GAAG,OAAO,EAAE,oBACpC,8OAAC,kKAAA,CAAA,OAAoB;QACnB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EACV,6NACA;QAED,GAAG,KAAK;;0BAET,8OAAC;gBAAK,WAAU;0BACd,cAAA,8OAAC,kKAAA,CAAA,gBAA6B;8BAC5B,cAAA,8OAAC,oMAAA,CAAA,QAAK;wBAAC,WAAU;;;;;;;;;;;;;;;;0BAIrB,8OAAC,kKAAA,CAAA,WAAwB;0BAAE;;;;;;;;;;;;AAG/B,WAAW,WAAW,GAAG,kKAAA,CAAA,OAAoB,CAAC,WAAW;AAEzD,MAAM,gCAAkB,CAAA,GAAA,qMAAA,CAAA,aAAgB,AAAD,EAGrC,CAAC,EAAE,SAAS,EAAE,GAAG,OAAO,EAAE,oBAC1B,8OAAC,kKAAA,CAAA,YAAyB;QACxB,KAAK;QACL,WAAW,CAAA,GAAA,mHAAA,CAAA,KAAE,AAAD,EAAE,4BAA4B;QACzC,GAAG,KAAK;;;;;;AAGb,gBAAgB,WAAW,GAAG,kKAAA,CAAA,YAAyB,CAAC,WAAW","debugId":null}},
    {"offset": {"line": 563, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/ai/flows/crop-recommendation.ts"],"sourcesContent":["\r\n'use server';\r\n\r\n/**\r\n * @fileOverview This file contains the Genkit flow for recommending the best crops to plant based on soil and location information.\r\n *\r\n * - recommendBestCrops - A function that handles the crop recommendation process.\r\n * - CropRecommendationInput - The input type for the recommendBestCrops function.\r\n * - CropRecommendationOutput - The return type for the recommendBestCrops function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\n\r\nconst CropRecommendationInputSchema = z.object({\r\n  soilNature: z\r\n    .string()\r\n    .describe('The nature of the soil, e.g., sandy, clay, loamy.'),\r\n  weatherConditions: z\r\n    .string()\r\n    .describe('The current weather conditions, e.g., sunny, rainy, cloudy.'),\r\n  state: z.string().describe('The state in which the farm is located.'),\r\n  phValue: z.number().describe('The pH value of the soil.'),\r\n});\r\nexport type CropRecommendationInput = z.infer<typeof CropRecommendationInputSchema>;\r\n\r\nconst CropRecommendationOutputSchema = z.object({\r\n  recommendedCrops: z\r\n    .array(z.string())\r\n    .describe('An array of recommended crops based on the input data.'),\r\n  reasons: z\r\n    .array(z.string())\r\n    .describe('Reasons for recommending each crop, e.g., drought resistance, high yield.'),\r\n});\r\nexport type CropRecommendationOutput = z.infer<typeof CropRecommendationOutputSchema>;\r\n\r\nexport async function recommendBestCrops(\r\n  input: CropRecommendationInput\r\n): Promise<CropRecommendationOutput> {\r\n  return recommendBestCropsFlow(input);\r\n}\r\n\r\nconst prompt = ai.definePrompt({\r\n  name: 'cropRecommendationPrompt',\r\n  input: {schema: CropRecommendationInputSchema},\r\n  output: {schema: CropRecommendationOutputSchema},\r\n  prompt: `You are an expert agricultural advisor. Based on the soil nature, pH value, weather conditions, and state provided by the user, recommend the best crops to plant.\r\n\r\nSoil Nature: {{{soilNature}}}\r\nSoil pH: {{{phValue}}}\r\nWeather Conditions: {{{weatherConditions}}}\r\nState: {{{state}}}\r\n\r\nCrucially, only recommend crops that are suitable for the given soil pH value. Consider the local climate, soil composition, and typical crop yields in the given state. Provide a list of recommended crops and a brief explanation for each recommendation, explicitly mentioning why it's suitable for the pH level.\r\n\r\nOutput the data as JSON in the following format:\r\n\\n{\\n  \"recommendedCrops\": [\"crop1\", \"crop2\", ...],\\n  \"reasons\": [\"reason1\", \"reason2\", ...]\r\n}`,\r\n});\r\n\r\nconst recommendBestCropsFlow = ai.defineFlow(\r\n  {\r\n    name: 'recommendBestCropsFlow',\r\n    inputSchema: CropRecommendationInputSchema,\r\n    outputSchema: CropRecommendationOutputSchema,\r\n  },\r\n  async input => {\r\n    const {output} = await prompt(input);\r\n    return output!;\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;;IAoCsB,qBAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 576, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/ai/flows/text-to-speech.ts"],"sourcesContent":["\r\n'use server';\r\n\r\n/**\r\n * @fileOverview A text-to-speech (TTS) flow using Genkit and Google AI.\r\n * \r\n * - textToSpeech - Converts a string of text into speech audio.\r\n * - TextToSpeechInput - The input type for the textToSpeech function.\r\n * - TextToSpeechOutput - The return type for the textToSpeech function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {googleAI} from '@genkit-ai/googleai';\r\nimport {z} from 'genkit';\r\nimport wav from 'wav';\r\nimport { translateText } from './translate-text';\r\n\r\nconst TextToSpeechInputSchema = z.object({\r\n  text: z.string().describe('The text to be converted to speech.'),\r\n  language: z.string().optional().describe('The language to use for the speech, e.g., \"en\", \"ta\".'),\r\n});\r\nexport type TextToSpeechInput = z.infer<typeof TextToSpeechInputSchema>;\r\n\r\nconst TextToSpeechOutputSchema = z.object({\r\n  audioDataUri: z.string().describe(\"The generated audio as a data URI. Expected format: 'data:audio/wav;base64,<encoded_data>'.\"),\r\n});\r\nexport type TextToSpeechOutput = z.infer<typeof TextToSpeechOutputSchema>;\r\n\r\n\r\nexport async function textToSpeech(input: TextToSpeechInput): Promise<TextToSpeechOutput> {\r\n  return textToSpeechFlow(input);\r\n}\r\n\r\nconst getVoiceForLanguage = (language?: string) => {\r\n    switch (language) {\r\n      case 'ta':\r\n        return 'Achernar';\r\n      case 'hi':\r\n        return 'Achird';\r\n      case 'te':\r\n        return 'Alnilam';\r\n      case 'kn':\r\n        return 'Erinome';\r\n      case 'ml':\r\n        return 'Gacrux';\r\n      case 'en':\r\n      default:\r\n        return 'Algenib';\r\n    }\r\n}\r\n\r\nconst textToSpeechFlow = ai.defineFlow(\r\n  {\r\n    name: 'textToSpeechFlow',\r\n    inputSchema: TextToSpeechInputSchema,\r\n    outputSchema: TextToSpeechOutputSchema,\r\n  },\r\n  async ({ text, language }) => {\r\n    const voiceName = getVoiceForLanguage(language);\r\n    \r\n    let textToSpeak = text;\r\n    if (language && language !== 'en') {\r\n      const translationResponse = await translateText({ text, targetLanguage: language });\r\n      textToSpeak = translationResponse.translatedText;\r\n    }\r\n\r\n\r\n    const { media } = await ai.generate({\r\n      model: googleAI.model('gemini-2.5-flash-preview-tts'),\r\n      config: {\r\n        responseModalities: ['AUDIO'],\r\n        speechConfig: {\r\n          voiceConfig: {\r\n            prebuiltVoiceConfig: { voiceName },\r\n          },\r\n        },\r\n      },\r\n      prompt: textToSpeak,\r\n    });\r\n    \r\n    if (!media) {\r\n      throw new Error('No audio media was generated.');\r\n    }\r\n\r\n    const audioBuffer = Buffer.from(\r\n      media.url.substring(media.url.indexOf(',') + 1),\r\n      'base64'\r\n    );\r\n\r\n    const wavData = await toWav(audioBuffer);\r\n    \r\n    return {\r\n      audioDataUri: 'data:audio/wav;base64,' + wavData,\r\n    };\r\n  }\r\n);\r\n\r\n\r\nasync function toWav(\r\n  pcmData: Buffer,\r\n  channels = 1,\r\n  rate = 24000,\r\n  sampleWidth = 2\r\n): Promise<string> {\r\n  return new Promise((resolve, reject) => {\r\n    const writer = new wav.Writer({\r\n      channels,\r\n      sampleRate: rate,\r\n      bitDepth: sampleWidth * 8,\r\n    });\r\n\r\n    const bufs: Buffer[] = [];\r\n    writer.on('error', reject);\r\n    writer.on('data', (chunk) => {\r\n      bufs.push(chunk);\r\n    });\r\n    writer.on('end', () => {\r\n      resolve(Buffer.concat(bufs).toString('base64'));\r\n    });\r\n\r\n    writer.write(pcmData);\r\n    writer.end();\r\n  });\r\n}\r\n"],"names":[],"mappings":";;;;;;IA6BsB,eAAA,WAAA,GAAA,CAAA,GAAA,sNAAA,CAAA,wBAAA,EAAA,8CAAA,sNAAA,CAAA,aAAA,EAAA,KAAA,GAAA,sNAAA,CAAA,mBAAA,EAAA","debugId":null}},
    {"offset": {"line": 589, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/components/forms/crop-recommendation-form.tsx"],"sourcesContent":["\r\n'use client';\r\n\r\nimport { useState, useEffect } from 'react';\r\nimport { useForm } from 'react-hook-form';\r\nimport { zodResolver } from '@hookform/resolvers/zod';\r\nimport * as z from 'zod';\r\nimport { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from '@/components/ui/card';\r\nimport { Button } from '@/components/ui/button';\r\nimport { Form, FormControl, FormField, FormItem, FormLabel, FormMessage } from '@/components/ui/form';\r\nimport { Input } from '@/components/ui/input';\r\nimport { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from '@/components/ui/select';\r\nimport { Loader2, Sprout, CheckCircle, Volume2 } from 'lucide-react';\r\nimport { recommendBestCrops, type CropRecommendationOutput } from '@/ai/flows/crop-recommendation';\r\nimport { useTranslation } from '@/hooks/use-translation';\r\nimport { useLanguage } from '@/hooks/use-language';\r\nimport { textToSpeech } from '@/ai/flows/text-to-speech';\r\nimport { translateText } from '@/ai/flows/translate-text';\r\n\r\n\r\nconst formSchema = z.object({\r\n  soilNature: z.string().min(1, 'Please select a soil type.'),\r\n  phValue: z.coerce.number().min(0).max(14, 'pH must be between 0 and 14.'),\r\n  weatherConditions: z.string().min(1, 'Please describe the weather.'),\r\n  state: z.string().min(2, 'Please enter a state.'),\r\n});\r\n\r\nconst indianStates = [\r\n    \"Andhra Pradesh\", \"Arunachal Pradesh\", \"Assam\", \"Bihar\", \"Chhattisgarh\", \"Goa\", \"Gujarat\", \"Haryana\", \r\n    \"Himachal Pradesh\", \"Jharkhand\", \"Karnataka\", \"Kerala\", \"Madhya Pradesh\", \"Maharashtra\", \"Manipur\", \r\n    \"Meghalaya\", \"Mizoram\", \"Nagaland\", \"Odisha\", \"Punjab\", \"Rajasthan\", \"Sikkim\", \"Tamil Nadu\", \r\n    \"Telangana\", \"Tripura\", \"Uttar Pradesh\", \"Uttarakhand\", \"West Bengal\", \r\n    \"Andaman and Nicobar Islands\", \"Chandigarh\", \"Dadra and Nagar Haveli and Daman and Diu\", \r\n    \"Delhi\", \"Jammu and Kashmir\", \"Ladakh\", \"Lakshadweep\", \"Puducherry\"\r\n];\r\n\r\n\r\nconst languages = [\r\n  { value: 'en', label: 'English' },\r\n  { value: 'ta', label: 'Tamil' },\r\n  { value: 'hi', label: 'Hindi' },\r\n  { value: 'ml', label: 'Malayalam' },\r\n  { value: 'te', label: 'Telugu' },\r\n  { value: 'kn', label: 'Kannada' },\r\n];\r\n\r\nconst texts = {\r\n    formTitle: \"Get Crop Recommendations\",\r\n    formDescription: \"Fill in the details below to get AI-powered crop suggestions.\",\r\n    soilLabel: \"Soil Nature\",\r\n    soilPlaceholder: \"Select soil type\",\r\n    phLabel: \"Soil pH\",\r\n    phPlaceholder: \"e.g., 6.5\",\r\n    weatherLabel: \"Current Weather\",\r\n    weatherPlaceholder: \"e.g., Sunny, 28°C\",\r\n    stateLabel: \"State\",\r\n    statePlaceholder: \"Select your state\",\r\n    recommendButton: \"Recommend Crops\",\r\n    resultTitle: \"AI Recommendations\",\r\n    resultDescription: \"Crops best suited for your conditions.\",\r\n    recommendedCrops: \"Recommended Crops:\",\r\n    resultsPlaceholder: \"Your crop recommendations will appear here.\",\r\n    language: \"Language\",\r\n    listenButton: \"Listen to recommendations\",\r\n    quotaError: \"You have exceeded your API quota. Please try again later or check your billing plan.\",\r\n};\r\n\r\ntype TranslatedResult = {\r\n    recommendedCrops: string[];\r\n    reasons: string[];\r\n}\r\n\r\nexport function CropRecommendationForm() {\r\n  const [result, setResult] = useState<CropRecommendationOutput | null>(null);\r\n  const [translatedResult, setTranslatedResult] = useState<TranslatedResult | null>(null);\r\n  const [error, setError] = useState<string | null>(null);\r\n  const [loading, setLoading] = useState(false);\r\n  const [audioDataUri, setAudioDataUri] = useState<string | null>(null);\r\n  const [audioLoading, setAudioLoading] = useState(false);\r\n  const [translationLoading, setTranslationLoading] = useState(false);\r\n\r\n  const { language } = useLanguage();\r\n  const [ttsLanguage, setTtsLanguage] = useState(language);\r\n  const { t } = useTranslation(texts);\r\n\r\n\r\n  useEffect(() => {\r\n    setTtsLanguage(language);\r\n  }, [language]);\r\n\r\n   useEffect(() => {\r\n    if (result && ttsLanguage) {\r\n      translateResults(ttsLanguage);\r\n    }\r\n    // eslint-disable-next-line react-hooks/exhaustive-deps\r\n  }, [ttsLanguage, result]);\r\n\r\n\r\n  const form = useForm<z.infer<typeof formSchema>>({\r\n    resolver: zodResolver(formSchema),\r\n    defaultValues: {\r\n      weatherConditions: '',\r\n      state: '',\r\n    },\r\n  });\r\n\r\n  const onSubmit = async (values: z.infer<typeof formSchema>) => {\r\n    setLoading(true);\r\n    setResult(null);\r\n    setTranslatedResult(null);\r\n    setError(null);\r\n    setAudioDataUri(null);\r\n    try {\r\n      const response = await recommendBestCrops(values);\r\n      setResult(response);\r\n      setTranslatedResult(response);\r\n    } catch (e: any) {\r\n      console.error(e);\r\n       if (e.message?.includes('429')) {\r\n          setError(t('quotaError'));\r\n      } else {\r\n          setError('An error occurred while getting recommendations.');\r\n      }\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const translateResults = async (targetLanguage: string) => {\r\n    if (!result) return;\r\n\r\n    if (targetLanguage === 'en') {\r\n      setTranslatedResult(result);\r\n      return;\r\n    }\r\n\r\n    setTranslationLoading(true);\r\n    try {\r\n      const combinedTexts = [...result.recommendedCrops, ...result.reasons].join('\\n---\\n');\r\n      const translationResponse = await translateText({ text: combinedTexts, targetLanguage });\r\n      const translatedParts = translationResponse.translatedText.split('\\n---\\n');\r\n      \r\n      const translatedCrops = translatedParts.slice(0, result.recommendedCrops.length);\r\n      const translatedReasons = translatedParts.slice(result.recommendedCrops.length);\r\n\r\n      setTranslatedResult({\r\n        recommendedCrops: translatedCrops,\r\n        reasons: translatedReasons,\r\n      });\r\n\r\n    } catch (e: any) {\r\n        console.error(e);\r\n        if (e.message?.includes('429')) {\r\n            setError(t('quotaError'));\r\n        } else {\r\n            setError('An error occurred during translation.');\r\n        }\r\n        setTranslatedResult(result); // Fallback to original\r\n    } finally {\r\n        setTranslationLoading(false);\r\n    }\r\n  };\r\n\r\n\r\n  const handleListen = async () => {\r\n    if (!translatedResult) return;\r\n    setAudioLoading(true);\r\n    setAudioDataUri(null);\r\n    setError(null);\r\n    try {\r\n      let textToRead = `${t('recommendedCrops')}\\n`;\r\n      translatedResult.recommendedCrops.forEach((crop, index) => {\r\n          textToRead += `${crop}. ${translatedResult.reasons[index] || ''}\\n`;\r\n      });\r\n\r\n      const response = await textToSpeech({ text: textToRead, language: ttsLanguage });\r\n      setAudioDataUri(response.audioDataUri);\r\n    } catch (e: any) {\r\n      console.error(e);\r\n      if (e.message?.includes('429')) {\r\n          setError(t('quotaError'));\r\n      } else {\r\n          setError('An error occurred during audio generation.');\r\n      }\r\n    } finally {\r\n      setAudioLoading(false);\r\n    }\r\n  };\r\n\r\n\r\n  return (\r\n    <div className=\"grid grid-cols-1 lg:grid-cols-2 gap-8\">\r\n      <Card>\r\n        <CardHeader>\r\n          <CardTitle className=\"font-headline\">{t('formTitle')}</CardTitle>\r\n          <CardDescription>{t('formDescription')}</CardDescription>\r\n        </CardHeader>\r\n        <Form {...form}>\r\n          <form onSubmit={form.handleSubmit(onSubmit)}>\r\n            <CardContent className=\"space-y-4\">\r\n              <FormField\r\n                control={form.control}\r\n                name=\"soilNature\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel>{t('soilLabel')}</FormLabel>\r\n                    <Select onValueChange={field.onChange} defaultValue={field.value}>\r\n                      <FormControl>\r\n                        <SelectTrigger><SelectValue placeholder={t('soilPlaceholder')} /></SelectTrigger>\r\n                      </FormControl>\r\n                      <SelectContent>\r\n                        <SelectItem value=\"sandy\">Sandy</SelectItem>\r\n                        <SelectItem value=\"clay\">Clay</SelectItem>\r\n                        <SelectItem value=\"loamy\">Loamy</SelectItem>\r\n                        <SelectItem value=\"silt\">Silt</SelectItem>\r\n                        <SelectItem value=\"peaty\">Peaty</SelectItem>\r\n                      </SelectContent>\r\n                    </Select>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n              <FormField\r\n                control={form.control}\r\n                name=\"phValue\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel>{t('phLabel')}</FormLabel>\r\n                    <FormControl>\r\n                      <Input type=\"number\" step=\"0.1\" placeholder={t('phPlaceholder')} {...field} />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n              <FormField\r\n                control={form.control}\r\n                name=\"weatherConditions\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel>{t('weatherLabel')}</FormLabel>\r\n                    <FormControl>\r\n                      <Input placeholder={t('weatherPlaceholder')} {...field} />\r\n                    </FormControl>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n              <FormField\r\n                control={form.control}\r\n                name=\"state\"\r\n                render={({ field }) => (\r\n                  <FormItem>\r\n                    <FormLabel>{t('stateLabel')}</FormLabel>\r\n                     <Select onValueChange={field.onChange} defaultValue={field.value}>\r\n                      <FormControl>\r\n                        <SelectTrigger><SelectValue placeholder={t('statePlaceholder')} /></SelectTrigger>\r\n                      </FormControl>\r\n                      <SelectContent>\r\n                        {indianStates.map(state => <SelectItem key={state} value={state}>{state}</SelectItem>)}\r\n                      </SelectContent>\r\n                    </Select>\r\n                    <FormMessage />\r\n                  </FormItem>\r\n                )}\r\n              />\r\n            </CardContent>\r\n            <CardFooter>\r\n              <Button type=\"submit\" disabled={loading} className=\"w-full\">\r\n                {loading && <Loader2 className=\"mr-2 h-4 w-4 animate-spin\" />}\r\n                {t('recommendButton')}\r\n              </Button>\r\n            </CardFooter>\r\n          </form>\r\n        </Form>\r\n      </Card>\r\n      \r\n      <Card>\r\n        <CardHeader>\r\n          <div className=\"flex flex-row items-start justify-between\">\r\n              <div>\r\n                <CardTitle className=\"font-headline\">{t('resultTitle')}</CardTitle>\r\n                <CardDescription>{t('resultDescription')}</CardDescription>\r\n              </div>\r\n              {result && (\r\n                <div className=\"flex items-center gap-2\">\r\n                  <Select value={ttsLanguage} onValueChange={setTtsLanguage}>\r\n                    <SelectTrigger className=\"w-[120px]\">\r\n                      <SelectValue placeholder={t('language')} />\r\n                    </SelectTrigger>\r\n                    <SelectContent>\r\n                      {languages.map((lang) => (\r\n                        <SelectItem key={lang.value} value={lang.value}>\r\n                          {lang.label}\r\n                        </SelectItem>\r\n                      ))}\r\n                    </SelectContent>\r\n                  </Select>\r\n                  <Button variant=\"outline\" size=\"icon\" onClick={handleListen} disabled={audioLoading || translationLoading} title={t('listenButton')}>\r\n                    {audioLoading ? <Loader2 className=\"h-4 w-4 animate-spin\" /> : <Volume2 className=\"h-4 w-4\" />}\r\n                    <span className=\"sr-only\">{t('listenButton')}</span>\r\n                  </Button>\r\n                </div>\r\n              )}\r\n            </div>\r\n        </CardHeader>\r\n        <CardContent>\r\n          {(loading || translationLoading) && (\r\n            <div className=\"flex justify-center items-center h-full\">\r\n              <Loader2 className=\"h-8 w-8 animate-spin text-primary\" />\r\n            </div>\r\n          )}\r\n          {error && <p className=\"text-destructive\">{error}</p>}\r\n          \r\n          {audioDataUri && (\r\n            <div className=\"mb-4\">\r\n               <audio controls autoPlay className=\"w-full\">\r\n                <source src={audioDataUri} type=\"audio/wav\" />\r\n                Your browser does not support the audio element.\r\n              </audio>\r\n            </div>\r\n          )}\r\n          \r\n          {translatedResult && !loading && !translationLoading && (\r\n            <div className=\"space-y-4\">\r\n              <h3 className=\"font-semibold text-lg\">{t('recommendedCrops')}</h3>\r\n              <ul className=\"space-y-3\">\r\n                {translatedResult.recommendedCrops.map((crop, index) => (\r\n                  <li key={index} className=\"pb-3 border-b border-border/50 last:border-b-0\">\r\n                    <div className=\"flex items-center gap-4\">\r\n                      <div className=\"p-2 bg-primary/10 rounded-full\">\r\n                        <Sprout className=\"h-5 w-5 text-primary\" />\r\n                      </div>\r\n                      <p className=\"font-medium flex-1\">{crop}</p>\r\n                    </div>\r\n                    {translatedResult.reasons[index] && (\r\n                       <div className=\"flex items-start gap-4 mt-2 pl-4\">\r\n                         <CheckCircle className=\"h-4 w-4 mt-1 text-accent flex-shrink-0\" />\r\n                         <p className=\"text-sm text-muted-foreground\">{translatedResult.reasons[index]}</p>\r\n                       </div>\r\n                    )}\r\n                  </li>\r\n                ))}\r\n              </ul>\r\n            </div>\r\n          )}\r\n          {!loading && !result && !error && (\r\n            <div className=\"text-center text-muted-foreground py-10\">\r\n              {t('resultsPlaceholder')}\r\n            </div>\r\n          )}\r\n        </CardContent>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 1471, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/app/crop-recommendation/page.tsx"],"sourcesContent":["\r\n'use client';\r\nimport { PageHeader, PageHeaderHeading, PageHeaderDescription } from '@/components/page-header';\r\nimport { CropRecommendationForm } from '@/components/forms/crop-recommendation-form';\r\nimport { useTranslation } from '@/hooks/use-translation';\r\n\r\nconst texts = {\r\n  title: \"Crop Recommendation\",\r\n  description: \"Provide details about your farm's conditions, and our AI will recommend the most suitable crops for you to cultivate.\",\r\n};\r\n\r\n\r\nexport default function CropRecommendationPage() {\r\n  const { t } = useTranslation(texts);\r\n  return (\r\n    <div className=\"container mx-auto py-8 px-4 md:px-6\">\r\n      <PageHeader>\r\n        <PageHeaderHeading className=\"font-headline\">{t('title')}</PageHeaderHeading>\r\n        <PageHeaderDescription>\r\n          {t('description')}\r\n        </PageHeaderDescription>\r\n      </PageHeader>\r\n      <div className=\"mt-8\">\r\n        <CropRecommendationForm />\r\n      </div>\r\n    </div>\r\n  );\r\n}\r\n"],"names":[],"mappings":";;;;AAEA;AACA;AACA;AAHA;;;;;AAKA,MAAM,QAAQ;IACZ,OAAO;IACP,aAAa;AACf;AAGe,SAAS;IACtB,MAAM,EAAE,CAAC,EAAE,GAAG,CAAA,GAAA,mIAAA,CAAA,iBAAc,AAAD,EAAE;IAC7B,qBACE,8OAAC;QAAI,WAAU;;0BACb,8OAAC,oIAAA,CAAA,aAAU;;kCACT,8OAAC,oIAAA,CAAA,oBAAiB;wBAAC,WAAU;kCAAiB,EAAE;;;;;;kCAChD,8OAAC,oIAAA,CAAA,wBAAqB;kCACnB,EAAE;;;;;;;;;;;;0BAGP,8OAAC;gBAAI,WAAU;0BACb,cAAA,8OAAC,6JAAA,CAAA,yBAAsB;;;;;;;;;;;;;;;;AAI/B","debugId":null}}]
}