{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\r\nimport {googleAI} from '@genkit-ai/googleai';\r\n\r\nexport const ai = genkit({\r\n  plugins: [googleAI()],\r\n  model: 'googleai/gemini-2.0-flash',\r\n});\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/ai/flows/translate-text.ts"],"sourcesContent":["\r\n'use server';\r\n\r\n/**\r\n * @fileOverview A text translation flow using Genkit and Google AI.\r\n * \r\n * - translateText - Translates text to a specified target language.\r\n * - TranslateTextInput - The input type for the translateText function.\r\n * - TranslateTextOutput - The return type for the translateText function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\n\r\nconst TranslateTextInputSchema = z.object({\r\n  text: z.string().describe('The text to be translated. This may contain multiple lines separated by \"\\\\n---\\\\n\".'),\r\n  targetLanguage: z.string().describe('The target language for translation (e.g., \"hi\", \"ta\").'),\r\n});\r\nexport type TranslateTextInput = z.infer<typeof TranslateTextInputSchema>;\r\n\r\nconst TranslateTextOutputSchema = z.object({\r\n  translatedText: z.string().describe('The translated text, preserving the \"\\\\n---\\\\n\" separators.'),\r\n});\r\nexport type TranslateTextOutput = z.infer<typeof TranslateTextOutputSchema>;\r\n\r\nexport async function translateText(input: TranslateTextInput): Promise<TranslateTextOutput> {\r\n  return translateTextFlow(input);\r\n}\r\n\r\nconst translateTextFlow = ai.defineFlow(\r\n  {\r\n    name: 'translateTextFlow',\r\n    inputSchema: TranslateTextInputSchema,\r\n    outputSchema: TranslateTextOutputSchema,\r\n  },\r\n  async ({ text, targetLanguage }) => {\r\n    // Handle cases where the text might be empty or just separators\r\n    if (!text.trim() || text.trim() === '---') {\r\n      return { translatedText: text };\r\n    }\r\n\r\n    const { text: translatedText } = await ai.generate({\r\n      model: 'googleai/gemini-2.0-flash',\r\n      prompt: `Translate the following text to the language with code '${targetLanguage}'. The text may contain multiple distinct entries separated by \"\\\\n---\\\\n\". Maintain this separator in your output. Return only the translated text, preserving the separators exactly as they appear in the input.\\n\\nText to translate: \"${text}\"`,\r\n    });\r\n    \r\n    return {\r\n      translatedText,\r\n    };\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;AAGA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACtC;AAGA,MAAM,4BAA4B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACtC;AAGO,eAAe,cAAc,KAAyB;IAC3D,OAAO,kBAAkB;AAC3B;AAEA,MAAM,oBAAoB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACrC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO,EAAE,IAAI,EAAE,cAAc,EAAE;IAC7B,gEAAgE;IAChE,IAAI,CAAC,KAAK,IAAI,MAAM,KAAK,IAAI,OAAO,OAAO;QACzC,OAAO;YAAE,gBAAgB;QAAK;IAChC;IAEA,MAAM,EAAE,MAAM,cAAc,EAAE,GAAG,MAAM,mHAAA,CAAA,KAAE,CAAC,QAAQ,CAAC;QACjD,OAAO;QACP,QAAQ,CAAC,wDAAwD,EAAE,eAAe,2OAA2O,EAAE,KAAK,CAAC,CAAC;IACxU;IAEA,OAAO;QACL;IACF;AACF;;;IAxBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 295, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/ai/flows/crop-recommendation.ts"],"sourcesContent":["\r\n'use server';\r\n\r\n/**\r\n * @fileOverview This file contains the Genkit flow for recommending the best crops to plant based on soil and location information.\r\n *\r\n * - recommendBestCrops - A function that handles the crop recommendation process.\r\n * - CropRecommendationInput - The input type for the recommendBestCrops function.\r\n * - CropRecommendationOutput - The return type for the recommendBestCrops function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\n\r\nconst CropRecommendationInputSchema = z.object({\r\n  soilNature: z\r\n    .string()\r\n    .describe('The nature of the soil, e.g., sandy, clay, loamy.'),\r\n  weatherConditions: z\r\n    .string()\r\n    .describe('The current weather conditions, e.g., sunny, rainy, cloudy.'),\r\n  state: z.string().describe('The state in which the farm is located.'),\r\n  phValue: z.number().describe('The pH value of the soil.'),\r\n});\r\nexport type CropRecommendationInput = z.infer<typeof CropRecommendationInputSchema>;\r\n\r\nconst CropRecommendationOutputSchema = z.object({\r\n  recommendedCrops: z\r\n    .array(z.string())\r\n    .describe('An array of recommended crops based on the input data.'),\r\n  reasons: z\r\n    .array(z.string())\r\n    .describe('Reasons for recommending each crop, e.g., drought resistance, high yield.'),\r\n});\r\nexport type CropRecommendationOutput = z.infer<typeof CropRecommendationOutputSchema>;\r\n\r\nexport async function recommendBestCrops(\r\n  input: CropRecommendationInput\r\n): Promise<CropRecommendationOutput> {\r\n  return recommendBestCropsFlow(input);\r\n}\r\n\r\nconst prompt = ai.definePrompt({\r\n  name: 'cropRecommendationPrompt',\r\n  input: {schema: CropRecommendationInputSchema},\r\n  output: {schema: CropRecommendationOutputSchema},\r\n  prompt: `You are an expert agricultural advisor. Based on the soil nature, pH value, weather conditions, and state provided by the user, recommend the best crops to plant.\r\n\r\nSoil Nature: {{{soilNature}}}\r\nSoil pH: {{{phValue}}}\r\nWeather Conditions: {{{weatherConditions}}}\r\nState: {{{state}}}\r\n\r\nCrucially, only recommend crops that are suitable for the given soil pH value. Consider the local climate, soil composition, and typical crop yields in the given state. Provide a list of recommended crops and a brief explanation for each recommendation, explicitly mentioning why it's suitable for the pH level.\r\n\r\nOutput the data as JSON in the following format:\r\n\\n{\\n  \"recommendedCrops\": [\"crop1\", \"crop2\", ...],\\n  \"reasons\": [\"reason1\", \"reason2\", ...]\r\n}`,\r\n});\r\n\r\nconst recommendBestCropsFlow = ai.defineFlow(\r\n  {\r\n    name: 'recommendBestCropsFlow',\r\n    inputSchema: CropRecommendationInputSchema,\r\n    outputSchema: CropRecommendationOutputSchema,\r\n  },\r\n  async input => {\r\n    const {output} = await prompt(input);\r\n    return output!;\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;AAGA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,gCAAgC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC7C,YAAY,uIAAA,CAAA,IAAC,CACV,MAAM,GACN,QAAQ,CAAC;IACZ,mBAAmB,uIAAA,CAAA,IAAC,CACjB,MAAM,GACN,QAAQ,CAAC;IACZ,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC/B;AAGA,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,kBAAkB,uIAAA,CAAA,IAAC,CAChB,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CAAC;IACZ,SAAS,uIAAA,CAAA,IAAC,CACP,KAAK,CAAC,uIAAA,CAAA,IAAC,CAAC,MAAM,IACd,QAAQ,CAAC;AACd;AAGO,eAAe,mBACpB,KAA8B;IAE9B,OAAO,uBAAuB;AAChC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA6B;IAC7C,QAAQ;QAAC,QAAQ;IAA8B;IAC/C,QAAQ,CAAC;;;;;;;;;;;CAWV,CAAC;AACF;AAEA,MAAM,yBAAyB,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC1C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAjCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 367, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/ai/flows/government-scheme-recommendation.ts"],"sourcesContent":["\r\n'use server';\r\n/**\r\n * @fileOverview A government scheme recommendation AI agent.\r\n *\r\n * - recommendGovSchemes - A function that handles the scheme recommendation process.\r\n * - RecommendGovSchemesInput - The input type for the recommendGovSchemes function.\r\n * - RecommendGovSchemesOutput - The return type for the recommendGovSchemes function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\n\r\nconst SchemeSchema = z.object({\r\n    name: z.string().describe('The full name of the government scheme.'),\r\n    url: z.string().describe('The official government URL for the scheme.'),\r\n});\r\n\r\nconst RecommendGovSchemesInputSchema = z.object({\r\n  state: z.string().describe('The state for which to find government schemes.'),\r\n  requirements: z\r\n    .string()\r\n    .optional()\r\n    .describe(\r\n      'The requirements of the user, such as women-focused schemes or irrigation support. If not provided, general schemes should be recommended.'\r\n    ),\r\n});\r\nexport type RecommendGovSchemesInput = z.infer<typeof RecommendGovSchemesInputSchema>;\r\n\r\nconst RecommendGovSchemesOutputSchema = z.object({\r\n  centralSchemes: z.array(SchemeSchema).describe('Relevant Central Government Schemes with their names and URLs.'),\r\n  stateSchemes: z.array(SchemeSchema).describe('Applicable State Government Schemes with their names and URLs.'),\r\n  womenSchemes: z\r\n    .array(SchemeSchema)\r\n    .describe('Women-specific agricultural schemes with their names and URLs.'),\r\n});\r\nexport type RecommendGovSchemesOutput = z.infer<typeof RecommendGovSchemesOutputSchema>;\r\n\r\nexport async function recommendGovSchemes(\r\n  input: RecommendGovSchemesInput\r\n): Promise<RecommendGovSchemesOutput> {\r\n  return recommendGovSchemesFlow(input);\r\n}\r\n\r\nconst prompt = ai.definePrompt({\r\n  name: 'recommendGovSchemesPrompt',\r\n  input: {schema: RecommendGovSchemesInputSchema},\r\n  output: {schema: RecommendGovSchemesOutputSchema},\r\n  prompt: `You are an expert in Indian government agricultural schemes.\r\n\r\nYou will use the state and requirements provided to recommend relevant schemes. For each scheme, you MUST provide the official government website URL.\r\n\r\nState: {{{state}}}\r\n{{#if requirements}}\r\nRequirements: {{{requirements}}}\r\n{{/if}}\r\n\r\nRecommend relevant Central Government Schemes, applicable State Government Schemes, and Women-specific agricultural schemes. If no specific requirements are given, provide a list of general, popular, and impactful schemes for the given state.\r\n\r\nFormat your output as a JSON object with keys for centralSchemes, stateSchemes, and womenSchemes. Each key should contain an array of objects, with each object having a 'name' and 'url' for the scheme.`,\r\n});\r\n\r\nconst recommendGovSchemesFlow = ai.defineFlow(\r\n  {\r\n    name: 'recommendGovSchemesFlow',\r\n    inputSchema: RecommendGovSchemesInputSchema,\r\n    outputSchema: RecommendGovSchemesOutputSchema,\r\n  },\r\n  async input => {\r\n    const {output} = await prompt(input);\r\n    return output!;\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;AAEA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,eAAe,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC1B,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,KAAK,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AAC7B;AAEA,MAAM,iCAAiC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC9C,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC3B,cAAc,uIAAA,CAAA,IAAC,CACZ,MAAM,GACN,QAAQ,GACR,QAAQ,CACP;AAEN;AAGA,MAAM,kCAAkC,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAC/C,gBAAgB,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,cAAc,QAAQ,CAAC;IAC/C,cAAc,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC,cAAc,QAAQ,CAAC;IAC7C,cAAc,uIAAA,CAAA,IAAC,CACZ,KAAK,CAAC,cACN,QAAQ,CAAC;AACd;AAGO,eAAe,oBACpB,KAA+B;IAE/B,OAAO,wBAAwB;AACjC;AAEA,MAAM,SAAS,mHAAA,CAAA,KAAE,CAAC,YAAY,CAAC;IAC7B,MAAM;IACN,OAAO;QAAC,QAAQ;IAA8B;IAC9C,QAAQ;QAAC,QAAQ;IAA+B;IAChD,QAAQ,CAAC;;;;;;;;;;;yMAW8L,CAAC;AAC1M;AAEA,MAAM,0BAA0B,mHAAA,CAAA,KAAE,CAAC,UAAU,CAC3C;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAM;IACJ,MAAM,EAAC,MAAM,EAAC,GAAG,MAAM,OAAO;IAC9B,OAAO;AACT;;;IAjCoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 442, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/ai/flows/sensor-analysis.ts"],"sourcesContent":["\r\n'use server';\r\n\r\n/**\r\n * @fileOverview This file contains the Genkit flow for analyzing sensor data from a farm,\r\n * and integrating crop and government scheme recommendations.\r\n *\r\n * - analyzeSensorData - A function that handles the sensor data analysis process.\r\n * - SensorAnalysisInput - The input type for the analyzeSensorData function.\r\n * - SensorAnalysisOutput - The return type for the analyzeSensorData function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\nimport { recommendBestCrops } from './crop-recommendation';\r\nimport { recommendGovSchemes } from './government-scheme-recommendation';\r\n\r\n\r\nconst SensorAnalysisInputSchema = z.object({\r\n  state: z.string().describe('The state where the farm is located.'),\r\n  soilType: z.string().describe('The type of soil (e.g., Laterite, Red Soil, Black Cotton).'),\r\n  phValue: z.number().describe('The pH value of the soil.'),\r\n  moistureLevel: z.string().describe('The moisture level (e.g., Low, Medium, High).'),\r\n  temperature: z.number().describe('The current temperature in Celsius.'),\r\n  sunlightLevel: z.string().describe('The level of sunlight exposure (e.g., Low, Moderate, High).'),\r\n  season: z.string().describe('The current season (e.g., Spring, Summer, Autumn, Winter).'),\r\n});\r\nexport type SensorAnalysisInput = z.infer<typeof SensorAnalysisInputSchema>;\r\n\r\n\r\nconst SchemeSchema = z.object({\r\n    name: z.string().describe('The full name of the government scheme.'),\r\n    url: z.string().describe('The official government URL for the scheme.'),\r\n});\r\n\r\nconst SensorAnalysisOutputSchema = z.object({\r\n    analysis: z.string().describe(\"A short, summarized analysis of the provided soil and environmental conditions.\"),\r\n    recommendedCrops: z.object({\r\n        crops: z.array(z.string()).describe('An array of recommended crops based on the input data.'),\r\n        reasons: z.array(z.string()).describe('Reasons for recommending each crop.'),\r\n    }),\r\n    governmentSchemes: z.object({\r\n        centralSchemes: z.array(SchemeSchema).describe('Relevant Central Government Schemes.'),\r\n        stateSchemes: z.array(SchemeSchema).describe('Applicable State Government Schemes.'),\r\n        womenSchemes: z.array(SchemeSchema).describe('Women-specific agricultural schemes.'),\r\n    }),\r\n});\r\nexport type SensorAnalysisOutput = z.infer<typeof SensorAnalysisOutputSchema>;\r\n\r\nexport async function analyzeSensorData(\r\n  input: SensorAnalysisInput\r\n): Promise<SensorAnalysisOutput> {\r\n  return sensorAnalysisFlow(input);\r\n}\r\n\r\nconst analysisPrompt = ai.definePrompt({\r\n  name: 'sensorAnalysisPrompt',\r\n  input: {schema: SensorAnalysisInputSchema},\r\n  output: {schema: z.object({ analysis: z.string() })},\r\n  prompt: `You are an expert agricultural scientist. Analyze the following sensor data from a farm and provide a short, summarized analysis of the soil and environmental conditions.\r\n\r\nLocation and Conditions:\r\n- State: {{{state}}}\r\n- Season: {{{season}}}\r\n\r\nSoil Analysis:\r\n- Soil Type: {{{soilType}}}\r\n- pH Value: {{{phValue}}}\r\n- Moisture Level: {{{moistureLevel}}}\r\n\r\nEnvironmental Factors:\r\n- Temperature: {{{temperature}}}°C\r\n- Sunlight Level: {{{sunlightLevel}}}\r\n\r\nProvide a brief, one or two sentence summary of the conditions. For example: \"The soil is slightly alkaline with high moisture, which is suitable for monsoon crops.\"`,\r\n});\r\n\r\nconst sensorAnalysisFlow = ai.defineFlow(\r\n  {\r\n    name: 'sensorAnalysisFlow',\r\n    inputSchema: SensorAnalysisInputSchema,\r\n    outputSchema: SensorAnalysisOutputSchema,\r\n  },\r\n  async (input) => {\r\n    // 1. Get soil analysis\r\n    const { output: analysisResult } = await analysisPrompt(input);\r\n    \r\n    // 2. Get crop recommendations\r\n    const cropRecs = await recommendBestCrops({\r\n        soilNature: input.soilType,\r\n        phValue: input.phValue,\r\n        weatherConditions: `${input.sunlightLevel} sunlight, ${input.temperature}°C, ${input.season} season.`,\r\n        state: input.state,\r\n    });\r\n\r\n    // 3. Get government schemes\r\n    const govSchemes = await recommendGovSchemes({\r\n        state: input.state,\r\n        // Using a general requirement to fetch broad schemes relevant to the analysis\r\n        requirements: `Schemes for a farmer with ${input.soilType} soil, dealing with ${input.moistureLevel} moisture.`\r\n    });\r\n\r\n    return {\r\n      analysis: analysisResult!.analysis,\r\n      recommendedCrops: {\r\n        crops: cropRecs.recommendedCrops,\r\n        reasons: cropRecs.reasons,\r\n      },\r\n      governmentSchemes: {\r\n        centralSchemes: govSchemes.centralSchemes,\r\n        stateSchemes: govSchemes.stateSchemes,\r\n        womenSchemes: govSchemes.womenSchemes,\r\n      },\r\n    };\r\n  }\r\n);\r\n"],"names":[],"mappings":"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","debugId":null}},
    {"offset": {"line": 565, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/.next-internal/server/app/sensor-analysis/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {translateText as '402578704a0068c0448430b72144adf3acc23f7769'} from 'ACTIONS_MODULE0'\nexport {analyzeSensorData as '40e41fbb6a33183dd957aafc02adb3547002b3fd39'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 617, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/app/sensor-analysis/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/sensor-analysis/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/sensor-analysis/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAoS,GACjU,kEACA","debugId":null}},
    {"offset": {"line": 631, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/app/sensor-analysis/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/sensor-analysis/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/sensor-analysis/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAgR,GAC7S,8CACA","debugId":null}},
    {"offset": {"line": 645, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}