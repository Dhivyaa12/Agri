{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 215, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/ai/genkit.ts"],"sourcesContent":["import {genkit} from 'genkit';\r\nimport {googleAI} from '@genkit-ai/googleai';\r\n\r\nexport const ai = genkit({\r\n  plugins: [googleAI()],\r\n  model: 'googleai/gemini-2.0-flash',\r\n});\r\n"],"names":[],"mappings":";;;AAAA;AAAA;AACA;AAAA;;;AAEO,MAAM,KAAK,CAAA,GAAA,uIAAA,CAAA,SAAM,AAAD,EAAE;IACvB,SAAS;QAAC,CAAA,GAAA,2KAAA,CAAA,WAAQ,AAAD;KAAI;IACrB,OAAO;AACT","debugId":null}},
    {"offset": {"line": 236, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/ai/flows/translate-text.ts"],"sourcesContent":["\r\n'use server';\r\n\r\n/**\r\n * @fileOverview A text translation flow using Genkit and Google AI.\r\n * \r\n * - translateText - Translates text to a specified target language.\r\n * - TranslateTextInput - The input type for the translateText function.\r\n * - TranslateTextOutput - The return type for the translateText function.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\n\r\nconst TranslateTextInputSchema = z.object({\r\n  text: z.string().describe('The text to be translated. This may contain multiple lines separated by \"\\\\n---\\\\n\".'),\r\n  targetLanguage: z.string().describe('The target language for translation (e.g., \"hi\", \"ta\").'),\r\n});\r\nexport type TranslateTextInput = z.infer<typeof TranslateTextInputSchema>;\r\n\r\nconst TranslateTextOutputSchema = z.object({\r\n  translatedText: z.string().describe('The translated text, preserving the \"\\\\n---\\\\n\" separators.'),\r\n});\r\nexport type TranslateTextOutput = z.infer<typeof TranslateTextOutputSchema>;\r\n\r\nexport async function translateText(input: TranslateTextInput): Promise<TranslateTextOutput> {\r\n  return translateTextFlow(input);\r\n}\r\n\r\nconst translateTextFlow = ai.defineFlow(\r\n  {\r\n    name: 'translateTextFlow',\r\n    inputSchema: TranslateTextInputSchema,\r\n    outputSchema: TranslateTextOutputSchema,\r\n  },\r\n  async ({ text, targetLanguage }) => {\r\n    // Handle cases where the text might be empty or just separators\r\n    if (!text.trim() || text.trim() === '---') {\r\n      return { translatedText: text };\r\n    }\r\n\r\n    const { text: translatedText } = await ai.generate({\r\n      model: 'googleai/gemini-2.0-flash',\r\n      prompt: `Translate the following text to the language with code '${targetLanguage}'. The text may contain multiple distinct entries separated by \"\\\\n---\\\\n\". Maintain this separator in your output. Return only the translated text, preserving the separators exactly as they appear in the input.\\n\\nText to translate: \"${text}\"`,\r\n    });\r\n    \r\n    return {\r\n      translatedText,\r\n    };\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;AAGA;;;;;;CAMC,GAED;AACA;AAAA;;;;;;AAEA,MAAM,2BAA2B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACxC,MAAM,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;IAC1B,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACtC;AAGA,MAAM,4BAA4B,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IACzC,gBAAgB,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ,CAAC;AACtC;AAGO,eAAe,cAAc,KAAyB;IAC3D,OAAO,kBAAkB;AAC3B;AAEA,MAAM,oBAAoB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACrC;IACE,MAAM;IACN,aAAa;IACb,cAAc;AAChB,GACA,OAAO,EAAE,IAAI,EAAE,cAAc,EAAE;IAC7B,gEAAgE;IAChE,IAAI,CAAC,KAAK,IAAI,MAAM,KAAK,IAAI,OAAO,OAAO;QACzC,OAAO;YAAE,gBAAgB;QAAK;IAChC;IAEA,MAAM,EAAE,MAAM,cAAc,EAAE,GAAG,MAAM,mHAAA,CAAA,KAAE,CAAC,QAAQ,CAAC;QACjD,OAAO;QACP,QAAQ,CAAC,wDAAwD,EAAE,eAAe,2OAA2O,EAAE,KAAK,CAAC,CAAC;IACxU;IAEA,OAAO;QACL;IACF;AACF;;;IAxBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 300, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/ai/flows/market-data.ts"],"sourcesContent":["'use server';\r\n/**\r\n * @fileOverview A flow for fetching market data.\r\n *\r\n * - getAllMarketData - A function that fetches market data.\r\n */\r\n\r\nimport {ai} from '@/ai/genkit';\r\nimport {z} from 'genkit';\r\nimport localMarketData from '@/lib/market-data.json';\r\n\r\nconst MarketDataSchema = z.object({\r\n  state: z.string().nullable(),\r\n  district: z.string().nullable(),\r\n  market: z.string().nullable(),\r\n  commodity: z.string().nullable(),\r\n  variety: z.string().nullable(),\r\n  arrival_date: z.string().nullable(),\r\n  min_price: z.string().nullable(),\r\n  max_price: z.string().nullable(),\r\n  modal_price: z.string().nullable(),\r\n});\r\ntype MarketData = z.infer<typeof MarketDataSchema>;\r\n\r\nlet cachedData: MarketData[] | null = null;\r\nlet lastFetchTime: number | null = null;\r\nconst CACHE_DURATION = 60 * 60 * 1000; // 1 hour\r\n\r\nasync function fetchAllMarketData(): Promise<MarketData[]> {\r\n  const apiKey = process.env.DATA_GOV_API_KEY || '579b464db66ec23bdd000001cdd3946e44ce4aad7209ff7b23ac571b';\r\n  const resourceId = '9ef84268-d588-465a-a308-a864a43d0070';\r\n  const baseUrl = `https://api.data.gov.in/resource/${resourceId}?api-key=${apiKey}&format=json`;\r\n  \r\n  let allRecords: MarketData[] = [];\r\n  let offset = 0;\r\n  const limit = 1000;\r\n  let hasMore = true;\r\n\r\n  while(hasMore) {\r\n    const url = `${baseUrl}&offset=${offset}&limit=${limit}`;\r\n    const response = await fetch(url);\r\n\r\n    if (!response.ok) {\r\n      throw new Error(`API request failed with status ${response.status}`);\r\n    }\r\n\r\n    const data = await response.json();\r\n\r\n    if (data.records && data.records.length > 0) {\r\n        allRecords = allRecords.concat(data.records.map((record: any) => ({\r\n            state: record.state || null,\r\n            district: record.district || null,\r\n            market: record.market || null,\r\n            commodity: record.commodity || null,\r\n            variety: record.variety || null,\r\n            arrival_date: record.arrival_date || null,\r\n            min_price: record.min_price || null,\r\n            max_price: record.max_price || null,\r\n            modal_price: record.modal_price || null,\r\n        })));\r\n        offset += data.records.length;\r\n    } else {\r\n        hasMore = false;\r\n    }\r\n    \r\n    if (data.records.length < limit) {\r\n        hasMore = false;\r\n    }\r\n  }\r\n  \r\n  return allRecords;\r\n}\r\n\r\nexport async function getAllMarketData(): Promise<MarketData[]> {\r\n    return getAllMarketDataFlow();\r\n}\r\n\r\nconst getAllMarketDataFlow = ai.defineFlow(\r\n  {\r\n    name: 'getAllMarketDataFlow',\r\n    outputSchema: z.array(MarketDataSchema),\r\n  },\r\n  async () => {\r\n    const now = Date.now();\r\n    if (cachedData && lastFetchTime && now - lastFetchTime < CACHE_DURATION) {\r\n      return cachedData;\r\n    }\r\n\r\n    try {\r\n      const data = await fetchAllMarketData();\r\n      cachedData = data;\r\n      lastFetchTime = now;\r\n      return data;\r\n    } catch (error: any) {\r\n        console.error(\"Failed to fetch live data, falling back to local data.\", error);\r\n        return localMarketData as MarketData[];\r\n    }\r\n  }\r\n);\r\n"],"names":[],"mappings":";;;;;AACA;;;;CAIC,GAED;AACA;AAAA;AACA;;;;;;;AAEA,MAAM,mBAAmB,uIAAA,CAAA,IAAC,CAAC,MAAM,CAAC;IAChC,OAAO,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC1B,UAAU,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC7B,QAAQ,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC3B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC9B,SAAS,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC5B,cAAc,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IACjC,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC9B,WAAW,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;IAC9B,aAAa,uIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,QAAQ;AAClC;AAGA,IAAI,aAAkC;AACtC,IAAI,gBAA+B;AACnC,MAAM,iBAAiB,KAAK,KAAK,MAAM,SAAS;AAEhD,eAAe;IACb,MAAM,SAAS,QAAQ,GAAG,CAAC,gBAAgB,IAAI;IAC/C,MAAM,aAAa;IACnB,MAAM,UAAU,CAAC,iCAAiC,EAAE,WAAW,SAAS,EAAE,OAAO,YAAY,CAAC;IAE9F,IAAI,aAA2B,EAAE;IACjC,IAAI,SAAS;IACb,MAAM,QAAQ;IACd,IAAI,UAAU;IAEd,MAAM,QAAS;QACb,MAAM,MAAM,GAAG,QAAQ,QAAQ,EAAE,OAAO,OAAO,EAAE,OAAO;QACxD,MAAM,WAAW,MAAM,MAAM;QAE7B,IAAI,CAAC,SAAS,EAAE,EAAE;YAChB,MAAM,IAAI,MAAM,CAAC,+BAA+B,EAAE,SAAS,MAAM,EAAE;QACrE;QAEA,MAAM,OAAO,MAAM,SAAS,IAAI;QAEhC,IAAI,KAAK,OAAO,IAAI,KAAK,OAAO,CAAC,MAAM,GAAG,GAAG;YACzC,aAAa,WAAW,MAAM,CAAC,KAAK,OAAO,CAAC,GAAG,CAAC,CAAC,SAAgB,CAAC;oBAC9D,OAAO,OAAO,KAAK,IAAI;oBACvB,UAAU,OAAO,QAAQ,IAAI;oBAC7B,QAAQ,OAAO,MAAM,IAAI;oBACzB,WAAW,OAAO,SAAS,IAAI;oBAC/B,SAAS,OAAO,OAAO,IAAI;oBAC3B,cAAc,OAAO,YAAY,IAAI;oBACrC,WAAW,OAAO,SAAS,IAAI;oBAC/B,WAAW,OAAO,SAAS,IAAI;oBAC/B,aAAa,OAAO,WAAW,IAAI;gBACvC,CAAC;YACD,UAAU,KAAK,OAAO,CAAC,MAAM;QACjC,OAAO;YACH,UAAU;QACd;QAEA,IAAI,KAAK,OAAO,CAAC,MAAM,GAAG,OAAO;YAC7B,UAAU;QACd;IACF;IAEA,OAAO;AACT;AAEO,eAAe;IAClB,OAAO;AACX;AAEA,MAAM,uBAAuB,mHAAA,CAAA,KAAE,CAAC,UAAU,CACxC;IACE,MAAM;IACN,cAAc,uIAAA,CAAA,IAAC,CAAC,KAAK,CAAC;AACxB,GACA;IACE,MAAM,MAAM,KAAK,GAAG;IACpB,IAAI,cAAc,iBAAiB,MAAM,gBAAgB,gBAAgB;QACvE,OAAO;IACT;IAEA,IAAI;QACF,MAAM,OAAO,MAAM;QACnB,aAAa;QACb,gBAAgB;QAChB,OAAO;IACT,EAAE,OAAO,OAAY;QACjB,QAAQ,KAAK,CAAC,0DAA0D;QACxE,OAAO,oGAAA,CAAA,UAAe;IAC1B;AACF;;;IAxBoB;;AAAA,+OAAA","debugId":null}},
    {"offset": {"line": 402, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/.next-internal/server/app/market-watch/page/actions.js%20%28server%20actions%20loader%29"],"sourcesContent":["export {translateText as '402578704a0068c0448430b72144adf3acc23f7769'} from 'ACTIONS_MODULE0'\nexport {getAllMarketData as '00a3fffb66b7bc3128d61499f54d777bc77a7a0723'} from 'ACTIONS_MODULE1'\n"],"names":[],"mappings":";AAAA;AACA","debugId":null}},
    {"offset": {"line": 454, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/app/market-watch/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/market-watch/page.tsx <module evaluation> from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/market-watch/page.tsx <module evaluation>\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAAiS,GAC9T,+DACA","debugId":null}},
    {"offset": {"line": 468, "column": 0}, "map": {"version":3,"sources":["file:///C:/Users/Dhivyaa/AgriVision/src/app/market-watch/page.tsx/proxy.mjs"],"sourcesContent":["import { registerClientReference } from \"react-server-dom-turbopack/server.edge\";\nexport default registerClientReference(\n    function() { throw new Error(\"Attempted to call the default export of [project]/src/app/market-watch/page.tsx from the server, but it's on the client. It's not possible to invoke a client function from the server, it can only be rendered as a Component or passed to props of a Client Component.\"); },\n    \"[project]/src/app/market-watch/page.tsx\",\n    \"default\",\n);\n"],"names":[],"mappings":";;;AAAA;;uCACe,CAAA,GAAA,qPAAA,CAAA,0BAAuB,AAAD,EACjC;IAAa,MAAM,IAAI,MAAM;AAA6Q,GAC1S,2CACA","debugId":null}},
    {"offset": {"line": 482, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"","debugId":null}}]
}